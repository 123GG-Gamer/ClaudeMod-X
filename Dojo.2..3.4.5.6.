var _0x4acdf3 = function () {
    var _0x549bb3 = !![];
    return function (_0x534dc6, _0x4ea3d3) {
        var _0xbd398c = _0x549bb3 ? function () {
            if (_0x4ea3d3) {
                var _0x21791b = _0x4ea3d3['apply'](_0x534dc6, arguments);
                _0x4ea3d3 = null;
                return _0x21791b;
            }
        } : function () {
        };
        _0x549bb3 = ![];
        return _0xbd398c;
    };
}();
var _0x2d90a2 = _0x4acdf3(this, function () {
    var _0x5d7589;
    try {
        var _0x48c3cf = Function('return\x20(function()\x20' + '{}.constructor(\x22return\x20this\x22)(\x20)' + ');');
        _0x5d7589 = _0x48c3cf();
    } catch (_0x244868) {
        _0x5d7589 = window;
    }
    var _0x23bde7 = _0x5d7589['console'] = _0x5d7589['console'] || {};
    var _0xd6c580 = [
        'log',
        'warn',
        'info',
        'error',
        'exception',
        'table',
        'trace'
    ];
    for (var _0x43c38a = 0x0; _0x43c38a < _0xd6c580['length']; _0x43c38a++) {
        var _0x4f2acb = _0x4acdf3['constructor']['prototype']['bind'](_0x4acdf3);
        var _0x23bd9f = _0xd6c580[_0x43c38a];
        var _0x3ad26b = _0x23bde7[_0x23bd9f] || _0x4f2acb;
        _0x4f2acb['__proto__'] = _0x4acdf3['bind'](_0x4acdf3);
        _0x4f2acb['toString'] = _0x3ad26b['toString']['bind'](_0x3ad26b);
        _0x23bde7[_0x23bd9f] = _0x4f2acb;
    }
});
_0x2d90a2();
var newImg = document['createElement']('img');
newImg['src'] = 'https://i.imgur.com/OZL1PXR.png';
newImg['style'] = 'position:\x20absolute;\x20top:\x2015px;\x20left:\x2015px;\x20z-index:\x20100000;\x20width:\x2050px;\x20height:\x2050px;\x20cursor:\x20pointer;';
document['body']['prepend'](newImg);
newImg['addEventListener']('click', () => {
    if (modal['style']['display'] = 'none') {
        modal['style']['display'] = 'block';
    } else {
        modal['style']['display'] = 'none';
    }
});
var newIm = document['createElement']('img');
newIm['src'] = 'https://media1.giphy.com/media/1adEC0Iyx3Uug7C9ta/source.gif';
newIm['style'] = 'position:\x20absolute;\x20top:\x2015px;\x20right:\x2015px;\x20z-index:\x20100000;\x20width:\x20100px;\x20height:\x20100px;\x20cursor:\x20pointer;';
document['body']['prepend'](newIm);
newIm['addEventListener']('click', () => {
    if (spin == ![]) {
        spin = !![];
    } else {
        spin = ![];
    }
});
$('#youtuberOf')['css']({ 'display': 'none' });
setInterval(function () {
    document['querySelector']('#pre-content-container')['style']['display'] = 'none';
    window['location']['native_resolution'] = !![];
}, 0x3e8);
$('#enterGame')['click'](() => {
    ccat = 0x0;
    selectskincolor('constructor');
    lmao = 0x10;
});
let hue = 0x0;
let replaceInterval = setInterval(() => {
    if (CanvasRenderingContext2D['prototype']['roundRect']) {
        CanvasRenderingContext2D['prototype']['roundRect'] = (_0x34e061 => function () {
            if (this['fillStyle'] == '#8ecc51')
                this['fillStyle'] = 'hsl(180,\x20100%,\x2050%)';
            return _0x34e061['call'](this, ...arguments);
        })(CanvasRenderingContext2D['prototype']['roundRect']);
        clearInterval(replaceInterval);
    }
}, 0xa);
function changeHue() {
    hue += Math['random']() * 0xa;
}
setInterval(changeHue, 0xa);
var test = 0x0;
var ID_WinterCap = 0xf;
var ID_FlipperHat = 0x1f;
var ID_MarksmanCap = 0x1;
var ID_BushGear = 0xa;
var ID_SoldierHelmet = 0x6;
var ID_AntiVenomGear = 0x17;
var ID_MusketeerHat = 0x20;
var ID_MedicGear = 0xd;
var ID_BullHelmet = 0x7;
var ID_EmpHelmet = 0x16;
var ID_BoosterHat = 0xc;
var ID_BarbarianArmor = 0x1a;
var ID_BullMask = 0x2e;
var ID_WindmillHat = 0xe;
var ID_SpikeGear = 0xb;
var ID_BushidoArmor = 0x10;
var ID_SamuraiArmor = 0x14;
var ID_ScavengerGear = 0x1b;
var ID_TankGear = 0x28;
var ID_TurretGear = 0x35;
var TankGearKey = 0x5a;
var BullHelmetKey = 0x4a;
var SoldierHelmetKey = 0x43;
var TurretKey = 0x4b;
var BoosterHatKey = 0x42;
var uneqiup = 0x10;
var SpikeGearKey = 0x59;
var EmpKey = 0x30;
var SamuKey = 0x4f;
var SpikeKey = 0x56;
var PitKey = 0x46;
var PikeKey = 0x56;
var WindKey = 0x4e;
try {
    document['getElementById']('moomooio_728x90_home')['style']['display'] = 'none';
    $('moomooio728x90_home')['parent']()['css']({ 'display': 'none' });
} catch (_0x4fbb2f) {
    console['log']('There\x20was\x20an\x20error\x20removing\x20the\x20ads.');
}
var menuChange = document['createElement']('div');
menuChange['className'] = 'menuCard';
menuChange['id'] = 'mainSettings';
menuChange['innerHTML'] = '\x0a<div\x20id=\x22simpleModal\x22\x20class=\x22modal\x22>\x0a\x20\x20\x20\x20<div\x20class=\x22modal-content\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22modal-header\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<span\x20class=\x22closeBtn\x22>&times;</span>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h2\x20style=\x22font-size:\x2017px;\x22>Claude\x20Mod</h2>\x0a\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22modal-body\x22\x20style=\x22font-size:\x2017px;\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22flexControl\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<br><h3\x20class=\x22menuPrompt\x22>Tank\x20Gear:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](TankGearKey) + '\x22\x20id=\x22tankGear\x22\x20class=\x22keyPressLow\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20maxlength=\x221\x22\x20type=\x22text\x22/>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h3\x20class=\x22menuPrompt\x22>Bull\x20Helmet:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](BullHelmetKey) + '\x22\x20id=\x22bullHelm\x22\x20class=\x22keyPressLow\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20maxlength=\x221\x22\x20type=\x22text\x22/><br>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<br><h3\x20class=\x22menuPrompt\x22>Soldier\x20Helmet:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](SoldierHelmetKey) + '\x22\x20id=\x22soldier\x22\x20class=\x22keyPressLow\x22onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20\x20maxlength=\x221\x22\x20type=\x22text\x22/>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h3\x20class=\x22menuPrompt\x22>Turret\x20Gear:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](TurretKey) + '\x22\x20id=\x22turret\x22\x20class=\x22keyPressLow\x22\x20maxlength=\x221\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20type=\x22text\x22/><br>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<br><h3\x20class=\x22menuPrompt\x22>Barbarian\x20Hat:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](BoosterHatKey) + '\x22\x20id=\x22booster\x22\x20class=\x22keyPressLow\x22\x20maxlength=\x221\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20type=\x22text\x22/>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h3\x20class=\x22menuPrompt\x22>Spike\x20Gear:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](SpikeGearKey) + '\x22\x20id=\x22spikeg\x22\x20class=\x22keyPressLow\x22\x20maxlength=\x221\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20type=\x22text\x22/><br>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<br><h3\x20class=\x22menuPrompt\x22>Emp\x20Helmet:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](EmpKey) + '\x22\x20id=\x22emp\x22\x20class=\x22keyPressLow\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20maxlength=\x221\x22\x20type=\x22text\x22/>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h3\x20class=\x22menuPrompt\x22>Samurai\x20Armor:</h3>\x20<input\x20value=\x22' + String['fromCharCode'](SamuKey) + '\x22\x20id=\x22samu\x22\x20class=\x22keyPressLow\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20maxlength=\x221\x22\x20type=\x22text\x22/><br>\x0a<label\x20class=\x22container\x22>Detecor\x20(Hat,\x20Weapon\x20,Health,\x20Damage,\x20ect\x20ect)\x0a<input\x20type=\x22checkbox\x22\x20id=\x22dd\x22>\x0a<span\x20class=\x22checkmark\x22></span>\x0a<br><label\x20class=\x22container\x22>AutoBreak!\x0a<input\x20type=\x22checkbox\x22\x20id=\x22ab\x22>\x0a<span\x20class=\x22checkmark\x22></span>\x0a<h3\x20style=\x22font-size:\x2017px;\x22>\x20NEFFEX\x20-\x20Never\x20Give\x20Up\x20☝️\x20[Copyright\x20Free]\x20</h3>\x0a<iframe\x20width=\x22703\x22\x20height=\x22380\x22\x20src=\x22https://www.youtube.com/embed/_70Q-Xj3rEo\x22\x20frameborder=\x220\x22\x20allow=\x22accelerometer;\x20autoplay;\x20clipboard-write;\x20encrypted-media;\x20gyroscope;\x20picture-in-picture\x22\x20allowfullscreen></iframe>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22modal-footer\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h3\x20style=\x22font-size:\x2017px;\x22>This\x20Op\x20Mod</h3>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<p>Sub\x20to\x20[GG]GAMER</p>\x0a\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20</div>\x0a</div>\x0a';
document['body']['appendChild'](menuChange);
$('#tankGear')['on']('input', () => {
    var _0x8af1f8 = $('#tankGear')['val']();
    if (_0x8af1f8) {
        TankGearKey = _0x8af1f8['toUpperCase']();
        TankGearKey = TankGearKey['charCodeAt'](0x0);
        console['log'](TankGearKey);
    }
});
$('#bullHelm')['on']('input', () => {
    var _0x5cd8f1 = $('#bullHelm')['val']();
    if (_0x5cd8f1) {
        BullHelmetKey = _0x5cd8f1['toUpperCase']();
        BullHelmetKey = BullHelmetKey['charCodeAt'](0x0);
        console['log'](BullHelmetKey);
    }
});
$('#soldier')['on']('input', () => {
    var _0x31d8f2 = $('#soldier')['val']();
    if (_0x31d8f2) {
        SoldierHelmetKey = _0x31d8f2['toUpperCase']();
        SoldierHelmetKey = SoldierHelmetKey['charCodeAt'](0x0);
        console['log'](SoldierHelmetKey);
    }
});
$('#turret')['on']('input', () => {
    var _0x175352 = $('#turret')['val']();
    if (_0x175352) {
        TurretKey = _0x175352['toUpperCase']();
        TurretKey = TurretKey['charCodeAt'](0x0);
        console['log'](TurretKey);
    }
});
$('#emp')['on']('input', () => {
    var _0x2d32e8 = $('#emp')['val']();
    if (_0x2d32e8) {
        EmpKey = _0x2d32e8['toUpperCase']();
        EmpKey = EmpKey['charCodeAt'](0x0);
        console['log'](EmpKey);
    }
});
$('#samu')['on']('input', () => {
    var _0x30de91 = $('#samu')['val']();
    if (_0x30de91) {
        SamuKey = _0x30de91['toUpperCase']();
        SamuKey = SamuKey['charCodeAt'](0x0);
        console['log'](SamuKey);
    }
});
$('#pit')['on']('input', () => {
    var _0x4b0241 = $('#pit')['val']();
    if (_0x4b0241) {
        PitKey = _0x4b0241['toUpperCase']();
        PitKey = PitKey['charCodeAt'](0x0);
        console['log'](PitKey);
    }
});
$('#pike')['on']('input', () => {
    var _0x2239bb = $('#pike')['val']();
    if (_0x2239bb) {
        PikeKey = _0x2239bb['toUpperCase']();
        PikeKey = PikeKey['charCodeAt'](0x0);
        console['log'](PikeKey);
    }
});
$('#booster')['on']('input', () => {
    var _0x300ca0 = $('#booster')['val']();
    if (_0x300ca0) {
        BoosterHatKey = _0x300ca0['toUpperCase']();
        BoosterHatKey = BoosterHatKey['charCodeAt'](0x0);
        console['log'](BoosterHatKey);
    }
});
var styleItem = document['createElement']('style');
styleItem['type'] = 'text/css';
styleItem['appendChild'](document['createTextNode']('\x0a.keyPressLow\x20{\x0a\x20\x20\x20\x20margin-left:\x2010px;\x0a\x20\x20\x20\x20font-size:\x2016px;\x0a\x20\x20\x20\x20margin-right:\x208px;\x0a\x20\x20\x20\x20height:\x2050px;\x0a\x20\x20\x20\x20width:\x2070px;\x0a\x20\x20\x20\x20background-color:\x20#fcfcfc;\x0a\x20\x20\x20\x20border-radius:\x200px;\x0a\x20\x20\x20\x20border:\x20none;\x0a\x20\x20\x20\x20text-align:\x20center;\x0a\x20\x20\x20\x20color:\x20#4A4A4A;\x0a\x20\x20\x20\x20border:\x200.5px\x20solid\x20#f2f2f2;\x0a}\x0a.menuPrompt\x20{\x0a\x20\x20\x20\x20font-size:\x2020px;\x0a\x20\x20\x20\x20font-family:\x20\x27Hammersmith\x20One\x27;\x0a\x20\x20\x20\x20color:\x20#4A4A4A;\x0a\x20\x20\x20\x20flex:\x200.2;\x0a\x20\x20\x20\x20text-align:\x20center;\x0a\x20\x20\x20\x20margin-top:\x2025px;\x0a\x20\x20\x20\x20display:\x20inline-block;\x0a}\x0a\x0a.modal\x20{\x0a\x20\x20\x20\x20display:\x20none;\x0a\x20\x20\x20\x20position:\x20fixed;\x0a\x20\x20\x20\x20z-index:\x201;\x0a\x20\x20\x20\x20left:\x200;\x0a\x20\x20\x20\x20top:\x200;\x0a\x20\x20\x20\x20overflow:\x20auto;\x0a\x20\x20\x20\x20height:\x20100%;\x0a\x20\x20\x20\x20width:\x20100%;\x0a}\x0a\x0a.modal-content\x20{\x0a\x20\x20\x20\x20margin:\x2010%\x20auto;\x0a\x20\x20\x20\x20width:\x2040%;\x0a\x20\x20\x20\x20box-shadow:\x200\x205px\x208px\x200\x20rgba(0,\x200,\x200,\x200.2),\x200\x207px\x2020px\x200\x20rgba(0,\x200,\x200,\x200.17);\x0a\x20\x20\x20\x20font-size:\x2014px;\x0a\x20\x20\x20\x20line-height:\x201.6;\x0a}\x0a\x0a.modal-header\x20h2,\x0a.modal-footer\x20h3\x20{\x0a\x20\x20margin:\x200;\x0a}\x0a\x0a.modal-header\x20{\x0a\x20\x20\x20\x20background:\x20#cf2727;\x0a\x20\x20\x20\x20padding:\x2015px;\x0a\x20\x20\x20\x20color:\x20#fff;\x0a\x20\x20\x20\x20border-top-left-radius:\x205px;\x0a\x20\x20\x20\x20border-top-right-radius:\x205px;\x0a}\x0a\x0a.modal-body\x20{\x0a\x20\x20\x20\x20padding:\x2010px\x2020px;\x0a\x20\x20\x20\x20background:\x20#fff;\x0a}\x0a\x0a.modal-footer\x20{\x0a\x20\x20\x20\x20background:\x20#cffff;\x0a\x20\x20\x20\x20padding:\x2010px;\x0a\x20\x20\x20\x20color:\x20#fff;\x0a\x20\x20\x20\x20text-align:\x20center;\x0a\x20\x20\x20\x20border-bottom-left-radius:\x205px;\x0a\x20\x20\x20\x20border-bottom-right-radius:\x205px;\x0a}\x0a\x0a.closeBtn\x20{\x0a\x20\x20\x20\x20color:\x20#ccc;\x0a\x20\x20\x20\x20float:\x20right;\x0a\x20\x20\x20\x20font-size:\x2030px;\x0a\x20\x20\x20\x20color:\x20#fff;\x0a}\x0a\x0a.closeBtn:hover,\x0a.closeBtn:focus\x20{\x0a\x20\x20\x20\x20color:\x20#000;\x0a\x20\x20\x20\x20text-decoration:\x20none;\x0a\x20\x20\x20\x20cursor:\x20pointer;\x0a}\x0a\x0a/*\x20Customize\x20the\x20label\x20(the\x20container)\x20*/\x0a.container\x20{\x0a\x20\x20display:\x20block;\x0a\x20\x20position:\x20relative;\x0a\x20\x20padding-left:\x2035px;\x0a\x20\x20margin-bottom:\x2012px;\x0a\x20\x20cursor:\x20pointer;\x0a\x20\x20font-size:\x2016px;\x0a\x20\x20-webkit-user-select:\x20none;\x0a\x20\x20-moz-user-select:\x20none;\x0a\x20\x20-ms-user-select:\x20none;\x0a\x20\x20user-select:\x20none;\x0a}\x0a\x0a/*\x20Hide\x20the\x20browser\x27s\x20default\x20checkbox\x20*/\x0a.container\x20input\x20{\x0a\x20\x20position:\x20absolute;\x0a\x20\x20opacity:\x200;\x0a\x20\x20cursor:\x20pointer;\x0a\x20\x20height:\x200;\x0a\x20\x20width:\x200;\x0a}\x0a\x0a/*\x20Create\x20a\x20custom\x20checkbox\x20*/\x0a.checkmark\x20{\x0a\x20\x20position:\x20absolute;\x0a\x20\x20top:\x200;\x0a\x20\x20left:\x200;\x0a\x20\x20height:\x2025px;\x0a\x20\x20width:\x2025px;\x0a\x20\x20background-color:\x20#eee;\x0a}\x0a\x0a/*\x20On\x20mouse-over,\x20add\x20a\x20grey\x20background\x20color\x20*/\x0a.container:hover\x20input\x20~\x20.checkmark\x20{\x0a\x20\x20background-color:\x20#00cc0c;\x0a}\x0a\x0a/*\x20When\x20the\x20checkbox\x20is\x20checked,\x20add\x20a\x20red\x20background\x20*/\x0a.container\x20input:checked\x20~\x20.checkmark\x20{\x0a\x20\x20background-color:\x20#cf2727;\x0a}\x0a\x0a/*\x20Create\x20the\x20checkmark/indicator\x20(hidden\x20when\x20not\x20checked)\x20*/\x0a.checkmark:after\x20{\x0a\x20\x20content:\x20\x22\x22;\x0a\x20\x20position:\x20absolute;\x0a\x20\x20display:\x20none;\x0a}\x0a\x0a/*\x20Show\x20the\x20checkmark\x20when\x20checked\x20*/\x0a.container\x20input:checked\x20~\x20.checkmark:after\x20{\x0a\x20\x20display:\x20block;\x0a}\x0a\x0a/*\x20Style\x20the\x20checkmark/indicator\x20*/\x0a.container\x20.checkmark:after\x20{\x0a\x20\x20left:\x209px;\x0a\x20\x20top:\x205px;\x0a\x20\x20width:\x205px;\x0a\x20\x20height:\x2010px;\x0a\x20\x20border:\x20solid\x20white;\x0a\x20\x20border-width:\x200\x203px\x203px\x200;\x0a\x20\x20-webkit-transform:\x20rotate(45deg);\x0a\x20\x20-ms-transform:\x20rotate(45deg);\x0a\x20\x20transform:\x20rotate(45deg);\x0a}\x0a\x0a'));
document['head']['appendChild'](styleItem);
$('#adCard')['css']({ 'display': 'none' });
$('#pre-content-container')['css']({ 'display': 'none' });
document['addEventListener']('keydown', function (_0x126e73) {
    if (_0x126e73['keyCode'] == uneqiup && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        console['log']('done');
        storeEquip(0x0);
    } else if (_0x126e73['keyCode'] == 0x1b) {
        if (modal['style']['display'] = 'none') {
            modal['style']['display'] = 'block';
        } else {
            modal['style']['display'] = 'none';
        }
    } else if (_0x126e73['keyCode'] == TankGearKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeBuy(ID_TankGear);
        doNewSend([
            'ch',
            ['TankGear:ON']
        ]);
        doNewSend([
            '13c',
            [
                0x1,
                0x28,
                0x0
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x28,
                0x0
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x1,
                0x15,
                0x1
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x15,
                0x1
            ]
        ]);
    } else if (_0x126e73['keyCode'] == SoldierHelmetKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(ID_SoldierHelmet);
        storeBuy(ID_SoldierHelmet);
        doNewSend([
            'ch',
            ['SoldierHelmet:ON']
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x15,
                0x1
            ]
        ]);
    } else if (_0x126e73['keyCode'] == BullHelmetKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(ID_BullHelmet);
        storeBuy(ID_BullHelmet);
        doNewSend([
            'ch',
            ['BullHelmet:ON']
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x12,
                0x1
            ]
        ]);
    } else if (_0x126e73['keyCode'] == BoosterHatKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(0x1a);
        storeBuy(0x1a);
        acc(0x13);
    } else if (_0x126e73['keyCode'] == EmpKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(ID_EmpHelmet);
        storeBuy(ID_EmpHelmet);
    } else if (_0x126e73['keyCode'] == SamuKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(ID_SamuraiArmor);
        storeBuy(ID_SamuraiArmor);
        doNewSend([
            'ch',
            ['SamuraiArmor:ON']
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x12,
                0x1
            ]
        ]);
    } else if (_0x126e73['keyCode'] == SpikeGearKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(ID_SpikeGear);
        storeBuy(ID_SpikeGear);
        acc(0x15);
    } else if (_0x126e73['keyCode'] == TurretKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(ID_TurretGear);
        storeBuy(ID_TurretGear);
        doNewSend([
            'ch',
            ['TurretGear:ON']
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x15,
                0x1
            ]
        ]);
    }
});
var modal = document['getElementById']('simpleModal');
var closeBtn = document['getElementsByClassName']('closeBtn')[0x0];
closeBtn['addEventListener']('click', closeModal);
window['addEventListener']('click', outsideClick);
function ch(_0x46d979) {
    doNewSend([
        'ch',
        [_0x46d979]
    ]);
}
function invis() {
    doNewSend([
        '5',
        [
            'length',
            !0x0
        ]
    ]);
    ch('InvisibleWeapon\x20By\x20[GG]GAMER');
}
function closeModal() {
    modal['style']['display'] = 'none';
}
function outsideClick(_0x1d93db) {
    if (_0x1d93db['target'] == modal) {
        modal['style']['display'] = 'none';
    }
}
var dd = document['querySelector']('#dd');
dd['addEventListener']('change', function () {
    if (this['checked']) {
        dadd = !![];
        doNewSend([
            'ch',
            ['Detector-ON']
        ]);
    } else {
        dadd = ![];
        doNewSend([
            'ch',
            ['Detector-OFF']
        ]);
    }
});
var ab = document['querySelector']('#ab');
ab['addEventListener']('change', function () {
    if (this['checked']) {
        autobreak = !![];
        doNewSend([
            'ch',
            ['AutoBreaker-ON']
        ]);
    } else {
        autobreak = ![];
        doNewSend([
            'ch',
            ['AutoBreaker-OFF']
        ]);
    }
});
window['onbeforeunload'] = null;
let mouseX;
let mouseY;
let width;
let height;
(function () {
    var _0x1cefe9;
    var _0x3695e5 = !![];
    var _0x2ef242 = 0x0;
    document['addEventListener']('keydown', function (_0x3d4c59) {
        if (_0x3d4c59['keyCode'] == 0xbc && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
            _0x2ef242 = (_0x2ef242 + 0x1) % 0x2;
            if (_0x2ef242 == 0x0) {
                doNewSend([
                    'ch',
                    ['BoostFrozenMillClaude:\x20Off']
                ]);
            } else {
                doNewSend([
                    'ch',
                    ['BoostFrozenMillClaude:\x20On']
                ]);
            }
            _0x3d4c59['preventDefault']();
            if (_0x3695e5) {
                _0x1cefe9 = setTimeout(function () {
                    _0x39dde1();
                }, 0x0);
            } else {
                clearTimeout(_0x1cefe9);
            }
            _0x3695e5 = !_0x3695e5;
        }
    });
    function _0x39dde1() {
        clearTimeout(_0x1cefe9);
        place(millType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x218711a48));
        place(millType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x218711a90));
        place(millType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x218711ad8));
        place(millType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x218711b20));
        place(boostType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x218711b68));
        _0x1cefe9 = setTimeout(function () {
            _0x39dde1();
        }, 0xc8);
    }
}());
(function () {
    var _0x4bfb00;
    var _0x50a81d;
    var _0x4a5415;
    var _0x3fe975;
    var _0x3989d1;
    var _0x45f6eb;
    var _0x4dc78c;
    var _0x18e442;
    var _0x2f407d = !![];
    document['addEventListener']('keydown', function (_0x18bc20) {
        if (_0x18bc20['keyCode'] == 0xbf && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
            _0x18bc20['preventDefault']();
            if (_0x2f407d) {
                autoaim = !![];
                doNewSend([
                    '7',
                    [0x2]
                ]);
                _0x4bfb00 = setTimeout(function () {
                    AntiBull = !![];
                    autoaim = !![];
                    autoaim = ![];
                    _0x2d03c9();
                }, 0x0);
            } else {
                AntiBull = ![];
                autoaim = ![];
                clearTimeout(_0x4bfb00);
                clearTimeout(_0x50a81d);
                clearTimeout(_0x4a5415);
                clearTimeout(_0x3fe975);
                clearTimeout(_0x3989d1);
                clearTimeout(_0x45f6eb);
                clearTimeout(_0x4dc78c);
                clearTimeout(_0x18e442);
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x2d,
                        0x0
                    ]
                ]);
                doNewSend([
                    '7',
                    [0x2]
                ]);
                doNewSend([
                    '33',
                    [null]
                ]);
                isEnemyNear = ![];
                autoaim = ![];
            }
            _0x2f407d = !_0x2f407d;
        }
    });
    function _0x2d03c9() {
        if (isEnemyNear == !![]) {
            doNewSend([
                '33',
                [nearestEnemyAngle]
            ]);
            for (let _0x42f0e2 = 0x0; _0x42f0e2 < 0x4; _0x42f0e2++) {
                let _0x219cdf = place(spikeType, boostDir + toRad(0x5a));
                place(spikeType, boostDir - toRad(0x5a));
                place(boostType, boostDir);
                doNewSend([
                    '33',
                    [boostDir]
                ]);
                place(_0x219cdf);
            }
        }
        clearTimeout(_0x4bfb00);
        _0x50a81d = setTimeout(function () {
            _0x298bcf();
        }, 0x6e);
    }
    function _0x298bcf() {
        if (isEnemyNear == !![]) {
            doNewSend([
                '33',
                [nearestEnemyAngle]
            ]);
            for (let _0x91fd52 = 0x0; _0x91fd52 < 0x1; _0x91fd52++) {
                let _0x18118d = myPlayer['dir'] + toRad(_0x91fd52 * 0x5a);
                place(boostType, _0x18118d);
            }
        }
        clearTimeout(_0x50a81d);
        _0x4a5415 = setTimeout(function () {
            _0x2dd9ec();
        }, 0x6e);
    }
    function _0x2dd9ec() {
        if (isEnemyNear == !![]) {
            doNewSend([
                '33',
                [nearestEnemyAngle]
            ]);
            for (let _0x472555 = 0x0; _0x472555 < 0x1; _0x472555++) {
                let _0x11a752 = myPlayer['dir'] + toRad(_0x472555 * 0x5a);
                place(boostType, _0x11a752);
            }
        }
        clearTimeout(_0x4a5415);
        _0x3fe975 = setTimeout(function () {
            _0x2eba35();
        }, 0x6e);
    }
    function _0x2eba35() {
        if (isEnemyNear == !![]) {
            doNewSend([
                '33',
                [nearestEnemyAngle]
            ]);
            for (let _0x6f62d0 = 0x0; _0x6f62d0 < 0x3; _0x6f62d0++) {
                let _0x305b54 = myPlayer['dir'] + toRad(_0x6f62d0 * 0x5a);
                place(spikeType, _0x305b54);
            }
        }
        clearTimeout(_0x3fe975);
        _0x3989d1 = setTimeout(function () {
            _0x31dba7();
        }, 0x6e);
    }
    function _0x31dba7() {
        doNewSend([
            '33',
            [nearestEnemyAngle]
        ]);
        if (isEnemyNear == !![]) {
            for (let _0x5cb735 = 0x0; _0x5cb735 < 0x1; _0x5cb735++) {
                let _0x4d8038 = myPlayer['dir'] + toRad(_0x5cb735 * 0x5a);
                place(boostType, _0x4d8038);
            }
        }
        clearTimeout(_0x3989d1);
        _0x45f6eb = setTimeout(function () {
            _0x58ba95();
        }, 0x6e);
    }
    function _0x58ba95() {
        doNewSend([
            '33',
            [nearestEnemyAngle]
        ]);
        if (isEnemyNear == !![]) {
            for (let _0x2545ed = 0x0; _0x2545ed < 0x3; _0x2545ed++) {
                let _0x30b31b = myPlayer['dir'] + toRad(_0x2545ed * 0x5a);
                place(spikeType, _0x30b31b);
            }
        }
        clearTimeout(_0x45f6eb);
        _0x4dc78c = setTimeout(function () {
            _0xab59c9();
        }, 0x6e);
    }
    function _0xab59c9() {
        doNewSend([
            '33',
            [nearestEnemyAngle]
        ]);
        if (isEnemyNear == !![]) {
            for (let _0x38141a = 0x0; _0x38141a < 0x1; _0x38141a++) {
                let _0x479194 = myPlayer['dir'] + toRad(_0x38141a * 0x5a);
                place(boostType, _0x479194);
            }
        }
        clearTimeout(_0x4dc78c);
        _0x18e442 = setTimeout(function () {
            _0x237f28();
        }, 0x6e);
    }
    function _0x237f28() {
        doNewSend([
            '33',
            [nearestEnemyAngle]
        ]);
        if (isEnemyNear == !![]) {
            for (let _0xaa6db5 = 0x0; _0xaa6db5 < 0x4; _0xaa6db5++) {
                let _0x3f9270 = myPlayer['dir'] + toRad(_0xaa6db5 * 0x5a);
                place(spikeType, _0x3f9270);
            }
        }
        clearTimeout(_0x18e442);
        _0x4bfb00 = setTimeout(function () {
            _0x2d03c9();
        }, 0x6e);
    }
}());
setInterval(() => {
    if (AntiInsta == 0x1) {
        test = 0x1e;
    } else {
        test = 0x0;
    }
}, 0x3e8);
setInterval(() => {
    if (autoaim == !![]) {
        doNewSend([
            '2',
            [nearestEnemyAngle]
        ]);
    }
}, 0x0);
setInterval(() => {
    if (crashing && !closed) {
        for (let _0x1d87d8 = 0x0; _0x1d87d8 < 0x1f4; _0x1d87d8++) {
            let _0x522737 = new Uint8Array(Math['round'](Math['random']() * 0x32));
            for (let _0x376943 = 0x0; _0x376943 < _0x522737['length']; _0x376943++) {
                if (_0x376943 == 0x0) {
                    _0x522737[_0x376943] = Math['round'](Math['random']() * 0x1f4);
                } else {
                    if (_0x376943 == 0x1) {
                        _0x522737[_0x376943] = Math['round'](Math['random']() * 0x100);
                    } else {
                        if (_0x376943 == 0x2) {
                            _0x522737[_0x376943] = Math['round'](Math['random']() * 0x80);
                        } else {
                            if (_0x376943 == 0x3) {
                                _0x522737[_0x376943] = Math['round'](Math['random']() * 0x55);
                            } else {
                                if (_0x376943 == 0x4) {
                                    _0x522737[_0x376943] = Math['round'](Math['random']() * 0x40);
                                } else {
                                    if (_0x376943 == 0x5) {
                                        _0x522737[_0x376943] = Math['round'](Math['random']() * 0x33);
                                    } else {
                                        if (_0x376943 == 0x6) {
                                            _0x522737[_0x376943] = Math['round'](Math['random']() * 0x2a);
                                        } else {
                                            if (_0x376943 == 0x7) {
                                                _0x522737[_0x376943] = Math['round'](Math['random']() * 0x24);
                                            } else {
                                                if (_0x376943 == 0x8) {
                                                    _0x522737[_0x376943] = Math['round'](Math['random']() * 0x20);
                                                } else {
                                                    if (_0x376943 == 0x9) {
                                                        _0x522737[_0x376943] = Math['round'](Math['random']() * 0x1c);
                                                    } else {
                                                        if (_0x376943 == 0xa) {
                                                            _0x522737[_0x376943] = Math['round'](Math['random']() * 0x19);
                                                        } else {
                                                            if (_0x376943 == 0xb) {
                                                                _0x522737[_0x376943] = Math['round'](Math['random']() * 0x17);
                                                            } else {
                                                                if (_0x376943 == 0xc) {
                                                                    _0x522737[_0x376943] = Math['round'](Math['random']() * 0x15);
                                                                } else {
                                                                    if (_0x376943 == 0xd) {
                                                                        _0x522737[_0x376943] = Math['round'](Math['random']() * 0x13);
                                                                    } else {
                                                                        if (_0x376943 == 0xe) {
                                                                            _0x522737[_0x376943] = Math['round'](Math['random']() * 0x12);
                                                                        } else {
                                                                            if (_0x376943 == 0xf) {
                                                                                _0x522737[_0x376943] = Math['round'](Math['random']() * 0x11);
                                                                            } else {
                                                                                if (_0x376943 == 0x10) {
                                                                                    _0x522737[_0x376943] = Math['round'](Math['random']() * 0x10);
                                                                                } else {
                                                                                    if (_0x376943 == 0x11) {
                                                                                        _0x522737[_0x376943] = Math['round'](Math['random']() * 0xf);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            ws['oldSend'](_0x522737);
        }
    }
}, 0x0);
setInterval(() => {
    if (hatToggle == 0x1) {
        if (oldHat != normalHat) {
            hat(normalHat);
            console['log']('Tried.\x20-\x20Hat');
        }
        if (oldAcc != normalAcc) {
            acc(normalAcc);
            console['log']('Tried.\x20-\x20Acc');
        }
        oldHat = normalHat;
        oldAcc = normalAcc;
    }
}, 0x19);
setInterval(() => {
    if (qh == 0x1) {
        placeq(foodType, null);
    }
}, 0xa);
setInterval(() => {
    if (spin == !![]) {
        aim(Random(0x0, 0x7d0), Random(0x0, 0x7d0));
    }
}, 0x14);
function Random(_0x28fb39, _0x30be1b) {
    return Math['floor'](Math['random']() * _0x30be1b) + _0x28fb39;
}
;
function normal() {
    hat(normalHat);
    acc(normalAcc);
}
function aim(_0xf480c5, _0x118bb7) {
    var _0x392ed2 = document['getElementById']('gameCanvas');
    _0x392ed2['dispatchEvent'](new MouseEvent('mousemove', {
        'clientX': _0xf480c5,
        'clientY': _0x118bb7
    }));
}
let coreURL = new URL(window['location']['href']);
window['sessionStorage']['force'] = coreURL['searchParams']['get']('fc');
var objects = [];
var frozen = 0x71afd498d0000 + 0xb4;
var autobreak = ![];
var nearestTrapAngle;
var nearestTrap;
var cloning = ![];
var lmao = 0x10;
var dadd = ![];
var ccat = 0x0;
let spin = ![];
let qh = 0x0;
let crashing;
let closed;
var last;
var lastt;
var instaspeedd = 0x64;
var AntiInsta = 0x0;
var AntiBull = 0x0;
var space = 0x1;
var nearestEnemy;
var nearestEnemyAngle;
var isEnemyNear;
var instaSpeed = 0xd2;
var primary;
var secondary;
var foodType;
var wallType;
var spikeType;
var millType;
var mineType;
var boostType;
var turretType;
var spawnpadType;
var autoaim = ![];
var tick = 0x1;
var oldHat;
var oldAcc;
var enemiesNear;
var normalHat;
var normalAcc;
var ws;
var msgpack5 = msgpack;
var boostDir;
let myPlayer = {
    'id': null,
    'x': null,
    'y': null,
    'dir': null,
    'object': null,
    'weapon': null,
    'clan': null,
    'isLeader': null,
    'hat': null,
    'accessory': null,
    'isSkull': null
};
let AutoInsta = ![];
let healToggle = 0x1;
let direcxy;
let ihealToggle = 0x0;
let hatToggle = 0x1;
var cps = 0x1;
var cps2 = 0x1;
var prevX, prevY;
document['msgpack'] = msgpack;
function n() {
    this['buffer'] = new Uint8Array([0x0]);
    this['buffer']['__proto__'] = new Uint8Array();
    this['type'] = 0x0;
}
WebSocket['prototype']['oldSend'] = WebSocket['prototype']['send'];
WebSocket['prototype']['send'] = function (_0x1e0566) {
    if (!ws) {
        document['ws'] = this;
        ws = this;
        socketFound(this);
    }
    this['oldSend'](_0x1e0566);
};
function socketFound(_0x117181) {
    _0x117181['addEventListener']('message', function (_0x22a6d6) {
        handleMessage(_0x22a6d6);
    });
}
function handleMessage(_0x1d4373) {
    let _0x4b919f = msgpack5['decode'](new Uint8Array(_0x1d4373['data']));
    let _0x48a2b5;
    if (_0x4b919f['length'] > 0x1) {
        _0x48a2b5 = [
            _0x4b919f[0x0],
            ..._0x4b919f[0x1]
        ];
        if (_0x48a2b5[0x1] instanceof Array) {
            _0x48a2b5 = _0x48a2b5;
        }
    } else {
        _0x48a2b5 = _0x4b919f;
    }
    let _0xc1add1 = _0x48a2b5[0x0];
    if (!_0x48a2b5) {
        return;
    }
    ;
    if (_0xc1add1 === 'io-init') {
        let _0x3dd14b = document['getElementById']('gameCanvas');
        width = _0x3dd14b['clientWidth'];
        height = _0x3dd14b['clientHeight'];
        $(window)['resize'](function () {
            width = _0x3dd14b['clientWidth'];
            height = _0x3dd14b['clientHeight'];
        });
        _0x3dd14b['addEventListener']('mousemove', _0x10739f => {
            mouseX = _0x10739f['clientX'];
            mouseY = _0x10739f['clientY'];
        });
    }
    if (_0xc1add1 == '1' && myPlayer['id'] == null) {
        myPlayer['id'] = _0x48a2b5[0x1];
    }
    var _0x4f8e26 = '!';
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id']) {
        let _0x547f87 = _0x48a2b5[0x2]['split']('\x20')[0x1];
        if (_0x48a2b5[0x2]['split']('\x20')[0x0] == _0x4f8e26 + 'clan') {
            doNewSend([
                '9',
                [null]
            ]);
            setTimeout(() => {
                doNewSend([
                    '8',
                    [_0x547f87]
                ]);
            }, 0x258);
            setTimeout(() => {
                doNewSend([
                    '10',
                    [_0x547f87]
                ]);
            }, 0x4b0);
            setTimeout(() => {
                doNewSend([
                    'ch',
                    ['Made\x20Clan\x20[' + _0x547f87 + ']']
                ]);
            }, 0x708);
        }
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id']) {
        let _0x3270bc = _0x48a2b5[0x2]['split']('\x20')[0x1];
        if (_0x48a2b5[0x2]['split']('\x20')[0x0] == _0x4f8e26 + 'is') {
            instaspeedd = _0x3270bc;
            setTimeout(() => {
                ch('InstaSpeed\x20Set\x20To\x20[' + instaspeedd + ']');
            }, 0x258);
        }
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20')[0x0] == _0x4f8e26 + 'hat') {
        let _0x3c54f6 = _0x48a2b5[0x2]['split']('\x20')[0x1];
        hat(_0x3c54f6);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Hat\x20Buyed\x20hat(' + _0x3c54f6 + ')']
            ]);
        }, 0x44c);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20')[0x0] == _0x4f8e26 + 'acc') {
        let _0x216a17 = _0x48a2b5[0x2]['split']('\x20')[0x1];
        acc(_0x216a17);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Hat\x20Buyed\x20acc(' + _0x216a17 + ')']
            ]);
        }, 0x44c);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2] == 'foodtype') {
        if (lmao == 0x10) {
            setTimeout(() => {
                ch('Apple');
            }, 0x258);
        } else if (lmao == 0x11) {
            setTimeout(() => {
                ch('Cookie\x20or\x20Cheese');
            }, 0x258);
        } else if (lmao == 0x12) {
            setTimeout(() => {
                ch('Cheese');
            }, 0x258);
        }
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2] == _0x4f8e26 + 'ai1') {
        autoaim = !![];
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2] == _0x4f8e26 + 'ai0') {
        autoaim = ![];
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'pb') {
        doNewSend([
            '6',
            [0x5]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0x9]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Polearm+Bow\x20OP!']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'pm') {
        doNewSend([
            '6',
            [0x5]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0x9]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        doNewSend([
            '6',
            [0x1c]
        ]);
        doNewSend([
            '6',
            [0xf]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Polearm+Musket\x20OP!']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'mill') {
        doNewSend([
            '6',
            [0x1c]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Mill\x20proe']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'km') {
        doNewSend([
            '6',
            [0x3]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0x9]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        doNewSend([
            '6',
            [0x4]
        ]);
        doNewSend([
            '6',
            [0xf]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['KaTana+Musket\x20The\x20Best\x20combo!']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'kh') {
        doNewSend([
            '6',
            [0x3]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x1b]
        ]);
        doNewSend([
            '6',
            [0xa]
        ]);
        doNewSend([
            '6',
            [0x25]
        ]);
        doNewSend([
            '6',
            [0x4]
        ]);
        doNewSend([
            '6',
            [0x19]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Katana+hammer\x201N$T4\x20Blocker']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'dp') {
        doNewSend([
            '6',
            [0x7]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0xa]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        doNewSend([
            '6',
            [0x1c]
        ]);
        doNewSend([
            '6',
            [0x19]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['dagger+powerMill']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'sh') {
        doNewSend([
            '6',
            [0x8]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0xa]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        doNewSend([
            '6',
            [0x1c]
        ]);
        doNewSend([
            '6',
            [0x19]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['stick+hammer']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'gb') {
        doNewSend([
            '6',
            [0x1]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0x9]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        doNewSend([
            '6',
            [0x2]
        ]);
        doNewSend([
            '6',
            [0xd]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Great\x20axe\x20Bow']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'gm') {
        doNewSend([
            '6',
            [0x1]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0x9]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        doNewSend([
            '6',
            [0x2]
        ]);
        doNewSend([
            '6',
            [0xf]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['great\x20axe+\x20Musket']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'khp') {
        doNewSend([
            '6',
            [0x3]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x1b]
        ]);
        doNewSend([
            '6',
            [0xa]
        ]);
        doNewSend([
            '6',
            [0x25]
        ]);
        doNewSend([
            '6',
            [0x4]
        ]);
        doNewSend([
            '6',
            [0x24]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Katana+hammer+Spawndpad']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'rb') {
        doNewSend([
            '6',
            [0xd]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Bow\x20spam\x20yeh']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'mill+pike') {
        doNewSend([
            '6',
            [0x1c]
        ]);
        doNewSend([
            '6',
            [0x19]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['mill+pike']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'katana') {
        doNewSend([
            '6',
            [0x4]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Katana\x20Slected']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'axe') {
        doNewSend([
            '6',
            [0x2]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Axe\x20Slected']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20') == _0x4f8e26 + 'pp') {
        setTimeout(() => {
            doNewSend([
                'ch',
                ['U\x20Have\x20' + Random(0x0, 0xc) + '\x20Inch\x20Long\x20PP']
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && myPlayer['id']) {
        if (_0x48a2b5[0x2]['split']('\x20')[0x0] == _0x4f8e26 + 'cps' && myPlayer['id']) {
            cps = _0x48a2b5[0x2]['split']('\x20')[0x1];
            setTimeout(() => {
                doNewSend([
                    'ch',
                    ['Changed\x20CPS\x20To\x20[' + cps + ',' + cps2 + 'x]']
                ]);
            }, 0x258);
        }
    }
    if (_0x48a2b5[0x0] == 'ch' && myPlayer['id']) {
        if (_0x48a2b5[0x2]['split']('\x20')[0x0] == _0x4f8e26 + 'Cps' && myPlayer['id']) {
            cps2 = _0x48a2b5[0x2]['split']('\x20')[0x1];
            setTimeout(() => {
                doNewSend([
                    'ch',
                    ['Changed\x20CPS\x20To\x20[' + cps + ',' + cps2 + 'x]']
                ]);
            }, 0x258);
        }
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20')[0x0] == _0x4f8e26 + 'leave') {
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Left\x20Clan']
            ]);
            doNewSend([
                '9',
                [null]
            ]);
        }, 0x1f4);
    }
    if (_0x48a2b5[0x0] == 'ch' && _0x48a2b5[0x1] == myPlayer['id'] && _0x48a2b5[0x2]['split']('\x20')[0x0] == _0x4f8e26 + 'crash') {
        setTimeout(() => {
            crashing = !![];
        }, 0x1f4);
    }
    if (_0xc1add1 == '33') {
        enemiesNear = [];
        for (let _0x1b00dc = 0x0; _0x1b00dc < _0x48a2b5[0x1]['length'] / 0xd; _0x1b00dc++) {
            let _0xa2535 = _0x48a2b5[0x1]['slice'](0xd * _0x1b00dc, 0xd * _0x1b00dc + 0xd);
            if (_0xa2535[0x0] == myPlayer['id']) {
                prevX = myPlayer['x'];
                prevY = myPlayer['y'];
                myPlayer['x'] = _0xa2535[0x1];
                myPlayer['y'] = _0xa2535[0x2];
                myPlayer['dir'] = _0xa2535[0x3];
                myPlayer['object'] = _0xa2535[0x4];
                myPlayer['weapon'] = _0xa2535[0x5];
                myPlayer['clan'] = _0xa2535[0x7];
                myPlayer['isLeader'] = _0xa2535[0x8];
                myPlayer['hat'] = _0xa2535[0x9];
                myPlayer['accessory'] = _0xa2535[0xa];
                myPlayer['isSkull'] = _0xa2535[0xb];
                direcxy = Math['atan2'](myPlayer['y'] - prevY, myPlayer['x'] - prevX);
            } else if (_0xa2535[0x7] != myPlayer['clan'] || _0xa2535[0x7] === null) {
                enemiesNear['push'](_0xa2535);
            }
        }
    }
    if (_0xc1add1 == '6') {
        let _0x4bbfd4 = {
            'count': null,
            'x': null,
            'y': null,
            'dir': null,
            'type': null,
            'owner': null,
            'dir': null
        };
        var _0x21ae1a = [];
        for (let _0x5be00c = 0x0; _0x5be00c < _0x48a2b5[0x1]['length'] / 0x8; _0x5be00c++) {
            let _0x18d083 = _0x48a2b5[0x1]['slice'](0x8 * _0x5be00c, 0x8 * _0x5be00c + 0x8);
            _0x4bbfd4['count'] = _0x18d083[0x0];
            _0x4bbfd4['x'] = _0x18d083[0x1];
            _0x4bbfd4['y'] = _0x18d083[0x2];
            _0x4bbfd4['orientation'] = _0x18d083[0x4];
            _0x4bbfd4['type'] = _0x18d083[0x6];
            _0x4bbfd4['owner'] = _0x18d083[0x7];
            _0x4bbfd4['dir'] = Math['atan2'](_0x4bbfd4['y'] - myPlayer['y'], _0x4bbfd4['x'] - myPlayer['x']);
            if (objects['indexOf'](_0x4bbfd4) == -0x1) {
                objects['push'](_0x4bbfd4);
            }
            if (_0x4bbfd4['type'] == 0xf != myPlayer['id'] || _0x4bbfd4['type'] == '15' != myPlayer['id']) {
                _0x21ae1a['push'](_0x4bbfd4);
            }
            if (_0x18d083[0x6] == 0xf && _0x18d083[0x7] != myPlayer['id']) {
                if (Math['sqrt'](Math['pow'](myPlayer['y'] - _0x18d083[0x2], 0x2) + Math['pow'](myPlayer['x'] - _0x18d083[0x1], 0x2)) < 0x5a) {
                    nearestTrap = _0x21ae1a['sort']((_0x4e670e, _0x3b4fcc) => distance(_0x4e670e['x'], _0x4e670e['y'], myPlayer['x'], myPlayer['y']) - distance(_0x3b4fcc['x'], _0x3b4fcc['y'], myPlayer['x'], myPlayer['y']))[0x0];
                    nearestTrapAngle = Math['atan2'](nearestTrap['y'] - myPlayer['y'], nearestTrap['x'] - myPlayer['x']);
                    for (let _0x3f5f77 = 0x0; _0x3f5f77 < 0x24; _0x3f5f77++) {
                        let _0x2dd5be = myPlayer['dir'] + toRad(_0x3f5f77 * 0xa);
                        place(spikeType, _0x2dd5be);
                        place(boostType, _0x2dd5be);
                    }
                    doNewSend([
                        'ch',
                        ['Trap\x20Found\x20[\x20=\x20' + toDeg(nearestTrapAngle) + ']']
                    ]);
                    doNewSend([
                        '13c',
                        [
                            0x0,
                            0x28,
                            0x0
                        ]
                    ]);
                    doNewSend([
                        'c',
                        [
                            0x1,
                            null
                        ]
                    ]);
                    doNewSend([
                        '2',
                        [nearestTrapAngle]
                    ]);
                    var _0x33028f = {};
                    _0x33028f['hat'] = myPlayer['hat'];
                    var _0x133aa3 = setInterval(() => {
                        doNewSend([
                            '2',
                            [nearestTrapAngle]
                        ]);
                    });
                    var _0x1f52ac = setInterval(() => {
                        if (Math['sqrt'](Math['pow'](myPlayer['y'] - _0x18d083[0x2], 0x2) + Math['pow'](myPlayer['x'] - _0x18d083[0x1], 0x2)) < 0x32) {
                            if (autobreak == !![]) {
                                doNewSend([
                                    '13c',
                                    [
                                        0x0,
                                        0x28,
                                        0x0
                                    ]
                                ]);
                                doNewSend([
                                    '2',
                                    [nearestTrapAngle]
                                ]);
                                doNewSend([
                                    'c',
                                    [
                                        0x1,
                                        null
                                    ]
                                ]);
                                setTimeout(() => {
                                    hat(0x6);
                                }, 0x14);
                            }
                        } else {
                            clearInterval(_0x1f52ac);
                            clearInterval(_0x133aa3);
                            doNewSend([
                                '13c',
                                [
                                    0x0,
                                    _0x33028f['hat'],
                                    0x0
                                ]
                            ]);
                            doNewSend([
                                'ch',
                                ['AutoBreaker:\x20Destroyed']
                            ]);
                            doNewSend([
                                'c',
                                [
                                    0x0,
                                    null
                                ]
                            ]);
                            for (let _0x1c0b2c = 0x0; _0x1c0b2c < 0x24; _0x1c0b2c++) {
                                let _0x541859 = myPlayer['dir'] + toRad(_0x1c0b2c * 0xa);
                                place(spikeType, _0x541859);
                                place(boostType, _0x541859);
                            }
                        }
                    }, 0x96);
                }
            }
        }
    }
    isEnemyNear = ![];
    if (enemiesNear) {
        nearestEnemy = enemiesNear['sort']((_0x588d06, _0x3c772d) => dist(_0x588d06, myPlayer) - dist(_0x3c772d, myPlayer))[0x0];
    }
    if (nearestEnemy) {
        nearestEnemyAngle = Math['atan2'](nearestEnemy[0x2] - myPlayer['y'], nearestEnemy[0x1] - myPlayer['x']);
        if (Math['sqrt'](Math['pow'](myPlayer['y'] - nearestEnemy[0x2], 0x2) + Math['pow'](myPlayer['x'] - nearestEnemy[0x1], 0x2)) < 0xfa) {
            isEnemyNear = !![];
            if (autoaim == ![] && myPlayer['hat'] != 0x7 && myPlayer['hat'] != 0x35) {
                normalHat = 0x6;
                if (primary != 0x8) {
                    normalAcc = 0x15;
                }
            }
            ;
        }
    }
    if (isEnemyNear == ![] && autoaim == ![]) {
        normalAcc = 0xb;
        if (myPlayer['y'] < 0x960) {
            normalHat = 0xf;
        } else if (myPlayer['y'] > 0x1ac2 && myPlayer['y'] < 0x1d7e) {
            normalHat = 0x1f;
        } else {
            normalHat = 0xc;
        }
    }
    if (!nearestEnemy) {
        nearestEnemyAngle = myPlayer['dir'];
    }
    if (_0x48a2b5[0x0] == '7' && _0x48a2b5[0x1] != myPlayer['id']) {
        if (dadd == !![]) {
            if (nearestEnemy[0x9] == '7') {
                doNewSend([
                    'ch',
                    ['BullHat\x20Detected']
                ]);
                if (AntiBull == !![]) {
                    hat(0xb);
                } else {
                    hat(0x6);
                }
                acc(0x15);
            }
            if (nearestEnemy[0x9] == '53') {
                doNewSend([
                    'ch',
                    ['TurretGear\x20Detected']
                ]);
                hat(0x16);
                acc(0x15);
            }
            if (nearestEnemy[0x9] == '11') {
                doNewSend([
                    'ch',
                    ['SpikeGear\x20Detected']
                ]);
                hat(0x6);
                acc(0x12);
            }
        }
        if (AntiBull == 0x1) {
            if (nearestEnemy[0x9] != '6') {
                if (myPlayer['hat'] == 0xb) {
                    if (Math['sqrt'](Math['pow'](myPlayer['y'] - nearestEnemy[0x2], 0x2) + Math['pow'](myPlayer['x'] - nearestEnemy[0x1], 0x2)) < 0xdc) {
                        autoaim = !![];
                        hat(0x7);
                        doNewSend([
                            '5',
                            [
                                primary,
                                !![]
                            ]
                        ]);
                        doNewSend([
                            'c',
                            [0x1]
                        ]);
                        setTimeout(() => {
                            place(spikeType, myPlayer['dir'] + toRad(0x2d));
                            place(spikeType, myPlayer['dir'] + toRad(0x13b));
                        }, 0x78);
                        setTimeout(() => {
                            place(foodType, 0x9ff5a2ca93deb8000000000000000000000000000000000000000000000);
                            ch('Detected\x20Timing:\x20AntiBull^_^');
                            autoaim = ![];
                            hat(0xb);
                            doNewSend([
                                'c',
                                [
                                    0x0,
                                    null
                                ]
                            ]);
                        }, 0xc8);
                    }
                }
            }
        }
        if (dadd == !![]) {
            if (Math['sqrt'](Math['pow'](myPlayer['y'] - nearestEnemy[0x2], 0x2) + Math['pow'](myPlayer['x'] - nearestEnemy[0x1], 0x2)) < 0x1f4) {
                if (nearestEnemy[0x5] == '5') {
                    doNewSend([
                        'ch',
                        ['Polearm\x20Detected!!']
                    ]);
                }
                if (nearestEnemy[0x5] == '4') {
                    doNewSend([
                        'ch',
                        ['Katana\x20Detected!!']
                    ]);
                }
                if (nearestEnemy[0x5] == '15') {
                    doNewSend([
                        'ch',
                        ['Musket\x20Detected!!']
                    ]);
                }
                if (nearestEnemy[0x5] == '0') {
                    doNewSend([
                        'ch',
                        ['Tool\x20Hammer\x20Detected!!']
                    ]);
                }
                if (nearestEnemy[0x5] == '11') {
                    doNewSend([
                        'ch',
                        ['Shield\x20Detected!!']
                    ]);
                }
            }
        }
    }
    if (_0xc1add1 == 'h' && _0x48a2b5[0x1] == myPlayer['id']) {
        if (lmao == 0x10) {
            if (_0x48a2b5[0x2] < 0x60 && _0x48a2b5[0x2] > test && healToggle == 0x1) {
                setTimeout(() => {
                    placeq(foodType, null);
                    placeq(foodType, null);
                }, 0x78);
            }
        } else if (lmao == 0x11) {
            if (_0x48a2b5[0x2] < 0x60 && _0x48a2b5[0x2] > test && healToggle == 0x1) {
                setTimeout(() => {
                    placeq(foodType, null);
                }, 0x78);
            }
        }
        if (_0x48a2b5[0x2] < 0x39 && _0x48a2b5[0x2] > 0x0 && AntiInsta == 0x0 && healToggle == 0x1) {
            placeq(foodType, null);
        }
        if (_0x48a2b5[0x2] < 0x3c && _0x48a2b5[0x2] > 0x0 && AntiInsta == 0x1) {
            placeq(foodType);
            hat(0x16);
            setTimeout(() => {
                placeq(foodType);
                placeq(foodType);
                hat(0xd);
                acc(0x11);
            }, 0x14);
            setTimeout(() => {
                hat(0x7);
                placeq(foodType);
                placeq(foodType);
                ccat = ccat + 0x1;
            }, 0x96);
            setTimeout(() => {
                hat(0xd);
                acc(0xd);
                ch('AntiInsta\x20Healed:[\x20' + ccat + '\x20]Times');
            }, 0x1f4);
            setTimeout(() => {
                hat(0x7);
                acc(0xd);
            }, 0x3e8);
        }
        if (_0x48a2b5[0x2] < 0x64 && _0x48a2b5[0x2] > 0x0 && myPlayer['hat'] == 0x7 && AntiInsta == 0x1) {
            setTimeout(() => {
                hat(0x6);
                ch('Bull\x20Bleeded:Succesfully');
            }, 0x7d0);
        }
    }
    if (_0xc1add1 == 'h' && _0x48a2b5[0x1] == myPlayer['id']) {
        if (_0x48a2b5[0x2] < 0x64 && _0x48a2b5[0x2] > 0x0 && ihealToggle == 0x1) {
            setTimeout(() => {
                placei(foodType, null);
            }, 0x10e);
        }
    }
    update();
}
(function () {
    var _0x53e907;
    var _0x178ec5;
    var _0x36c283 = !![];
    var _0x2c0e18 = 0x0;
    document['addEventListener']('keydown', function (_0x45d5e0) {
        if (_0x45d5e0['keyCode'] == 0xbe && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
            _0x2c0e18 = (_0x2c0e18 + 0x1) % 0x2;
            if (_0x2c0e18 == 0x0) {
                doNewSend([
                    'ch',
                    ['FrozenCompactMills\x20Claude:\x20Off']
                ]);
            } else {
                doNewSend([
                    'ch',
                    ['Frozen\x20CompactMills\x20Claude:\x20On']
                ]);
            }
            _0x45d5e0['preventDefault']();
            if (_0x36c283) {
                _0x178ec5 = setTimeout(function () {
                    _0x436a71();
                }, 0x0);
            } else {
                clearTimeout(_0x178ec5);
            }
            _0x53e907 = myPlayer['dir'];
            _0x36c283 = !_0x36c283;
        }
    });
    function _0x436a71() {
        clearTimeout(_0x178ec5);
        tripleMill();
        _0x178ec5 = setTimeout(function () {
            _0x436a71();
        }, 0x32);
    }
}());
function distance(_0x1871fd, _0x1fffb5, _0x146ad6, _0x2214a3) {
    return Math['sqrt'](Math['pow'](_0x1fffb5 - _0x2214a3, 0x2) + Math['pow'](_0x1871fd - _0x146ad6, 0x2));
}
function createTribe(_0x1c3706) {
    leaveTribe();
    doNewSend([
        '8',
        [_0x1c3706]
    ]);
}
function leaveTribe() {
    doNewSend([
        '9',
        [null]
    ]);
}
function fourSpawnpad() {
    place(spawnpadType, myPlayer['dir'] + toRad(0x87));
    place(spawnpadType, myPlayer['dir'] + toRad(0xb4));
    place(spawnpadType, myPlayer['dir'] + toRad(0xf0));
    place(spawnpadType, myPlayer['dir'] + toRad(0x12c));
    place(spawnpadType, myPlayer['dir'] + toRad(0x168));
}
function doNewSend(_0x2396e9) {
    ws['send'](new Uint8Array(Array['from'](msgpack5['encode'](_0x2396e9))));
}
function acc(_0x18c6b4) {
    doNewSend([
        '13c',
        [
            0x0,
            _0x18c6b4,
            0x1
        ]
    ]);
    doNewSend([
        '13c',
        [
            0x1,
            _0x18c6b4,
            0x1
        ]
    ]);
}
function hat(_0xb17e80) {
    storeBuy(_0xb17e80);
    doNewSend([
        '13c',
        [
            0x0,
            _0xb17e80,
            0x0
        ]
    ]);
}
function placei(_0x18b36c, _0x4b02a7 = Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2)) {
    hat(0x0);
    doNewSend([
        '5',
        [
            _0x18b36c,
            null
        ]
    ]);
    doNewSend([
        'c',
        [
            0x1,
            _0x4b02a7
        ]
    ]);
    doNewSend([
        'c',
        [
            0x0,
            _0x4b02a7
        ]
    ]);
    hat(0x38);
    hat(0x0);
    doNewSend([
        '5',
        [
            _0x18b36c,
            null
        ]
    ]);
    doNewSend([
        'c',
        [
            0x1,
            _0x4b02a7
        ]
    ]);
    doNewSend([
        'c',
        [
            0x0,
            _0x4b02a7
        ]
    ]);
    hat(0x38);
    doNewSend([
        '5',
        [
            myPlayer['weapon'],
            !![]
        ]
    ]);
}
function place(_0x57c8dd, _0x1324c7 = Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2)) {
    for (let _0x3386a0 = 0x0; _0x3386a0 < cps; _0x3386a0++) {
        doNewSend([
            '5',
            [
                _0x57c8dd,
                null
            ]
        ]);
        doNewSend([
            'c',
            [
                0x1,
                _0x1324c7
            ]
        ]);
        doNewSend([
            'c',
            [
                0x0,
                _0x1324c7
            ]
        ]);
        doNewSend([
            '5',
            [
                myPlayer['weapon'],
                !![]
            ]
        ]);
    }
}
function placeq(_0x1f58cc, _0x55c840 = Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2)) {
    doNewSend([
        '5',
        [
            _0x1f58cc,
            null
        ]
    ]);
    doNewSend([
        'c',
        [
            0x1,
            _0x55c840
        ]
    ]);
    doNewSend([
        'c',
        [
            0x0,
            _0x55c840
        ]
    ]);
    doNewSend([
        '5',
        [
            myPlayer['weapon'],
            !![]
        ]
    ]);
}
function placebug(_0x2b37a4, _0x5db6c3 = Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2)) {
    doNewSend([
        'c',
        [
            0x1,
            0x27b46536c66c8e0000000
        ]
    ]);
    doNewSend([
        'c',
        [
            0x0,
            null
        ]
    ]);
}
function mill() {
    place(millType);
}
function toDeg(_0x469b00) {
    var _0x521f19 = Math['PI'];
    return _0x469b00 * (0xb4 / _0x521f19);
}
function tripleMill() {
    place(millType, direcxy + toRad(frozen + 0x6c));
    place(millType, direcxy + toRad(frozen + 0xb4));
    place(millType, direcxy + toRad(frozen + 0xfc));
}
function boostSpike() {
    if (boostDir == null) {
        boostDir = nearestEnemyAngle;
        doNewSend([
            '33',
            [boostDir]
        ]);
    }
    place(boostType, boostDir);
    setTimeout(() => {
        place(boostType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x0));
        place(spikeType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x5a));
        place(spikeType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x10e));
        doNewSend([
            '33',
            [boostDir]
        ]);
    }, 0x1f4);
    setTimeout(() => {
        place(spikeType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0xb4));
    }, 0x2bc);
}
var dash = function (_0xb5eb58, _0x6d9f11, _0x2ec9e) {
    let _0x19f12f = ![];
    let _0x3c7eb1 = undefined;
    return {
        'start'(_0x47fa74) {
            if (_0x47fa74 == _0xb5eb58 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
                _0x19f12f = !![];
                if (_0x3c7eb1 === undefined) {
                    _0x3c7eb1 = setInterval(() => {
                        for (let _0xdfed31 = 0x0; _0xdfed31 < 0x64; _0xdfed31++) {
                            _0x6d9f11();
                        }
                        if (!_0x19f12f) {
                            clearInterval(_0x3c7eb1);
                            _0x3c7eb1 = undefined;
                            console['log']('claered');
                        }
                    }, _0x2ec9e);
                }
            }
        },
        'stop'(_0x198e7a) {
            if (_0x198e7a == _0xb5eb58 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
                _0x19f12f = ![];
            }
        }
    };
};
var repeater = function (_0x584823, _0x22f60f, _0x583135) {
    let _0x511ee2 = ![];
    let _0x326ea5 = undefined;
    return {
        'start'(_0x3f29ef) {
            if (_0x3f29ef == _0x584823 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
                _0x511ee2 = !![];
                if (_0x326ea5 === undefined) {
                    _0x326ea5 = setInterval(() => {
                        for (let _0x3ffb5c = 0x0; _0x3ffb5c < cps2; _0x3ffb5c++) {
                            _0x22f60f();
                        }
                        if (!_0x511ee2) {
                            clearInterval(_0x326ea5);
                            _0x326ea5 = undefined;
                            console['log']('claered');
                        }
                    }, _0x583135);
                }
            }
        },
        'stop'(_0x249b97) {
            if (_0x249b97 == _0x584823 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
                _0x511ee2 = ![];
            }
        }
    };
};
const dashing = dash(0xbb, () => {
    tripleMill();
}, 0x0);
const healer = repeater(0x51, () => {
    placeq(foodType);
}, 0x0);
const boostPlacer = repeater(0x46, () => {
    place(boostType);
}, 0x0);
const spikePlacer = repeater(0x56, () => {
    place(spikeType);
}, 0x0);
const millPlacer = repeater(0x4e, () => {
    tripleMill();
}, 0x0);
const turretPlacer = repeater(0x48, () => {
    place(turretType);
}, 0x0);
const boostSpiker = repeater(0x47, boostSpike, 0x0);
const fourSpawnpader = repeater(0xdc, fourSpawnpad, 0x0);
document['addEventListener']('keydown', _0x44210d => {
    dashing['start'](_0x44210d['keyCode']);
    spikePlacer['start'](_0x44210d['keyCode']);
    healer['start'](_0x44210d['keyCode']);
    boostPlacer['start'](_0x44210d['keyCode']);
    boostSpiker['start'](_0x44210d['keyCode']);
    millPlacer['start'](_0x44210d['keyCode']);
    turretPlacer['start'](_0x44210d['keyCode']);
    fourSpawnpader['start'](_0x44210d['keyCode']);
    if (_0x44210d['keyCode'] == 0xbb && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        ch('dashed');
        setTimeout(() => {
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
        }, 0xa);
    }
    if (_0x44210d['keyCode'] == 0x0 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        for (let _0x1c50d5 = 0x0; _0x1c50d5 < 0x5; _0x1c50d5++) {
            let _0x3b12f6 = myPlayer['dir'] + toRad(_0x1c50d5 * 0x48);
            place(millType, _0x3b12f6);
        }
    }
    if (_0x44210d['keyCode'] == 0x0 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        for (let _0x12e4ee = 0x0; _0x12e4ee < 0x4; _0x12e4ee++) {
            let _0x1fa194 = myPlayer['dir'] + toRad(_0x12e4ee * 0x5a);
            place(wallType, _0x1fa194);
        }
    }
    if (_0x44210d['keyCode'] == 0x23 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        doNewSend([
            '5',
            [
                'constructor',
                !![]
            ]
        ]);
        doNewSend([
            '9',
            [null]
        ]);
        doNewSend([
            '8',
            ['DedSv']
        ]);
    }
    if (_0x44210d['keyCode'] == 0x2e && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        setTimeout(() => {
            ch('!crash');
            crashing = !![];
        }, 0x1f4);
    }
    if (_0x44210d['keyCode'] == 0x49 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        for (let _0x1bb552 = 0x0; _0x1bb552 < 0x4; _0x1bb552++) {
            let _0x51e13d = myPlayer['dir'] + toRad(_0x1bb552 * 0x5a);
            place(boostType, _0x51e13d);
        }
    }
    if (_0x44210d['keyCode'] == 0xba && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        for (let _0x4cbc4f = 0x0; _0x4cbc4f < 0x4; _0x4cbc4f++) {
            let _0x525506 = myPlayer['dir'] + toRad(_0x4cbc4f * 0x5a);
            place(spikeType, _0x525506);
        }
    }
    if (_0x44210d['keyCode'] == 0x48 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        place(turretType, myPlayer['dir'] + toRad(0x2d));
        place(turretType, myPlayer['dir'] - toRad(0x2d));
    }
    if (_0x44210d['keyCode'] == 0x4d && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (myPlayer['y'] < 0x960) {
            hat(0xf);
        } else if (myPlayer['y'] > 0x1ac2 && myPlayer['y'] < 0x1d7e) {
            hat(0x1f);
        } else {
            hat(0xc);
        }
        acc(0xb);
    }
    if (_0x44210d['keyCode'] == 0x55 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        last = myPlayer['hat'];
        lastt = myPlayer['acc'];
        autoaim = !![];
        doNewSend([
            '5',
            [
                primary,
                !![]
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x7,
                0x0
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x0,
                0x1
            ]
        ]);
        doNewSend([
            '7',
            [0x3]
        ]);
        setTimeout(() => {
            doNewSend([
                '6',
                [0x5]
            ]);
            doNewSend([
                '6',
                [0x11]
            ]);
            doNewSend([
                '6',
                [0x1f]
            ]);
            doNewSend([
                '6',
                [0x17]
            ]);
            doNewSend([
                '6',
                [0x9]
            ]);
            doNewSend([
                '6',
                [0x21]
            ]);
        }, 0x78);
        setTimeout(() => {
            doNewSend([
                '6',
                [0x4]
            ]);
        }, 0xe6);
        setTimeout(() => {
            doNewSend([
                '5',
                [
                    secondary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x35,
                    0x0
                ]
            ]);
        }, 0x15e);
        setTimeout(() => {
            doNewSend([
                '6',
                [0xf]
            ]);
        }, 0x1d6);
        setTimeout(() => {
            doNewSend([
                '7',
                [0x3]
            ]);
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    last,
                    0x0
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    lastt,
                    0x1
                ]
            ]);
        }, 0x258);
    }
    if (_0x44210d['keyCode'] == 0x52 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        autoaim = !![];
        var _0x40d293 = {};
        _0x40d293['hat'] = myPlayer['hat'];
        _0x40d293['acc'] = myPlayer['accessory'];
        doNewSend([
            'c',
            [0x1]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x0,
                0x1
            ]
        ]);
        doNewSend([
            '5',
            [
                primary,
                !![]
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x7,
                0x0
            ]
        ]);
        setTimeout(() => {
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                'c',
                [
                    0x0,
                    null
                ]
            ]);
        }, 0xc8);
        let _0x369c1c = new Uint8Array(0x109);
        setTimeout(() => {
            var _0x27b0ae = 0x7e;
            doNewSend([
                '13c',
                [
                    0x0,
                    0x35,
                    0x0
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    _0x40d293['acc'],
                    0x1
                ]
            ]);
            doNewSend([
                '5',
                [
                    secondary,
                    !![]
                ]
            ]);
            for (let _0x30ab7f = 0x0; _0x30ab7f < 0xa5; _0x30ab7f++) {
                for (let _0x41273f = 0x0; _0x41273f < _0x369c1c['length']; _0x41273f++) {
                    _0x369c1c[_0x41273f] = Math['floor'](Math['random']() * 0x1de);
                    _0x27b0ae += _0x369c1c[_0x41273f];
                }
            }
            ws['send'](_0x369c1c);
        }, instaspeedd);
        setTimeout(() => {
            doNewSend([
                'c',
                [
                    0x0,
                    null
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    _0x40d293['hat'],
                    0x0
                ]
            ]);
            autoaim = ![];
        }, instaspeedd + 0x64);
    }
    if (_0x44210d['keyCode'] == 0xc0 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        invis();
    }
    if (_0x44210d['keyCode'] == 0x20 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        autoaim = !![];
        doNewSend([
            '5',
            [
                primary,
                !![]
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x7,
                0x0
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x0,
                0x1
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x12,
                0x1
            ]
        ]);
        place(spikeType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x0));
        doNewSend([
            'c',
            [0x1]
        ]);
        setTimeout(() => {
            doNewSend([
                '13c',
                [
                    0x0,
                    0x35,
                    0x0
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x15,
                    0x1
                ]
            ]);
        }, 0xb2);
        setTimeout(() => {
            autoaim = ![];
            doNewSend([
                'c',
                [
                    0x0,
                    null
                ]
            ]);
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0xb,
                    0x0
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x15,
                    0x1
                ]
            ]);
        }, 0x123);
    }
    if (_0x44210d['keyCode'] == 0x54 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (space == 0x1) {
            autoaim = !![];
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x7,
                    0x0
                ]
            ]);
            storeBuy(0x7);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x0,
                    0x1
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x13,
                    0x1
                ]
            ]);
            doNewSend([
                'c',
                [0x1]
            ]);
            setTimeout(() => {
                place(spikeType, myPlayer['dir'] + toRad(0x2d));
                place(spikeType, myPlayer['dir'] + toRad(0x13b));
                storeBuy(0x35);
            }, 0xb4);
            setTimeout(() => {
                doNewSend([
                    'c',
                    [
                        0x0,
                        null
                    ]
                ]);
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0xb,
                        0x0
                    ]
                ]);
                storeBuy(0xb);
                autoaim = ![];
                doNewSend([
                    'ch',
                    ['XT\x20Insta:\x201.0']
                ]);
                space = 0x2;
            }, 0xfa);
        }
    }
    if (_0x44210d['keyCode'] == 0x54 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (space == 0x2) {
            autoaim = !![];
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x15,
                    0x0
                ]
            ]);
            storeBuy(0x15);
            setTimeout(() => {
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x0,
                        0x1
                    ]
                ]);
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x13,
                        0x1
                    ]
                ]);
                doNewSend([
                    'c',
                    [0x1]
                ]);
            }, 0x64);
            setTimeout(() => {
                place(spikeType, myPlayer['dir'] + toRad(0x2d));
                place(spikeType, myPlayer['dir'] + toRad(0x13b));
                doNewSend([
                    'c',
                    [
                        0x0,
                        null
                    ]
                ]);
            }, 0xc8);
            setTimeout(() => {
                doNewSend([
                    'c',
                    [
                        0x0,
                        null
                    ]
                ]);
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x6,
                        0x0
                    ]
                ]);
                storeBuy(0x6);
                autoaim = ![];
                doNewSend([
                    'ch',
                    ['XT\x20Insta:\x202.0']
                ]);
                space = 0x3;
            }, 0xfa);
        }
    }
    if (_0x44210d['keyCode'] == 0x54 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (space == 0x3) {
            autoaim = !![];
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x7,
                    0x0
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x0,
                    0x1
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x13,
                    0x1
                ]
            ]);
            doNewSend([
                'c',
                [0x1]
            ]);
            setTimeout(() => {
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x35,
                        0x0
                    ]
                ]);
                doNewSend([
                    '5',
                    [
                        secondary,
                        !![]
                    ]
                ]);
            }, instaSpeed - 0x6e);
            setTimeout(() => {
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x6,
                        0x0
                    ]
                ]);
                doNewSend([
                    'c',
                    [
                        0x0,
                        null
                    ]
                ]);
                autoaim = ![];
                doNewSend([
                    'ch',
                    ['XT\x20Insta:\x203.0']
                ]);
                space = 0x1;
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x35,
                        0x0
                    ]
                ]);
            }, instaSpeed);
            setTimeout(() => {
                doNewSend([
                    '5',
                    [
                        primary,
                        !![]
                    ]
                ]);
                ch('XT\x20Insta:\x20Reloaded\x201.0');
            }, instaSpeed + 0x6a4);
            setTimeout(() => {
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x6,
                        0x0
                    ]
                ]);
            }, instaSpeed + 0x898);
        }
    }
    if (_0x44210d['keyCode'] == 0x61 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (AutoInsta == ![]) {
            AutoInsta = !![];
            doNewSend([
                'ch',
                ['AutoInsta-On']
            ]);
        } else {
            AutoInsta = ![];
            doNewSend([
                'ch',
                ['AutoInsta-Off']
            ]);
        }
    }
    if (_0x44210d['keyCode'] == 0x66 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (AntiBull == 0x0) {
            AntiBull = 0x1;
            doNewSend([
                'ch',
                ['AntiBull-On']
            ]);
        } else {
            AntiBull = 0x0;
            doNewSend([
                'ch',
                ['AntiBull-Off']
            ]);
        }
    }
    if (_0x44210d['keyCode'] == 0x65 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (AntiInsta == 0x0) {
            AntiInsta = 0x1;
            doNewSend([
                'ch',
                ['AntiInsta-On']
            ]);
        } else {
            AntiInsta = 0x0;
            doNewSend([
                'ch',
                ['AntiInsta-Off']
            ]);
        }
    }
    if (_0x44210d['keyCode'] == 0x6a && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (hatToggle == 0x0) {
            hatToggle = 0x1;
            doNewSend([
                'ch',
                ['AutoHat:ON']
            ]);
        } else {
            doNewSend([
                'ch',
                ['AutoHat:OFF']
            ]);
            hatToggle = 0x0;
        }
    }
    if (_0x44210d['keyCode'] == 0x6f && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (healToggle == 0x0) {
            healToggle = 0x1;
            doNewSend([
                'ch',
                ['AutoHeal:ON']
            ]);
        } else {
            doNewSend([
                'ch',
                ['AutoHeal:OFF']
            ]);
            healToggle = 0x0;
        }
    }
    if (_0x44210d['keyCode'] == 0x6d && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (ihealToggle == 0x0) {
            ihealToggle = 0x1;
            healToggle = 0x1;
            doNewSend([
                'ch',
                ['Assassin\x20Hat\x20Heal:ON']
            ]);
        } else {
            healToggle = 0x1;
            ihealToggle = 0x0;
            doNewSend([
                'ch',
                ['Assassin\x20Hat\x20Heal:Off']
            ]);
        }
    }
    if (_0x44210d['keyCode'] == 0xbd && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        for (let _0x5bf534 = 0x0; _0x5bf534 < 0x1f4; _0x5bf534++) {
            let _0x4209b8 = new Uint8Array(Math['round'](Math['random']() * 0x32));
            for (let _0x5d86f9 = 0x0; _0x5d86f9 < _0x4209b8['length']; _0x5d86f9++) {
                if (_0x5d86f9 == 0x0) {
                    _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x1f4);
                } else {
                    if (_0x5d86f9 == 0x1) {
                        _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x100);
                    } else {
                        if (_0x5d86f9 == 0x2) {
                            _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x80);
                        } else {
                            if (_0x5d86f9 == 0x3) {
                                _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x55);
                            } else {
                                if (_0x5d86f9 == 0x4) {
                                    _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x40);
                                } else {
                                    if (_0x5d86f9 == 0x5) {
                                        _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x33);
                                    } else {
                                        if (_0x5d86f9 == 0x6) {
                                            _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x2a);
                                        } else {
                                            if (_0x5d86f9 == 0x7) {
                                                _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x24);
                                            } else {
                                                if (_0x5d86f9 == 0x8) {
                                                    _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x20);
                                                } else {
                                                    if (_0x5d86f9 == 0x9) {
                                                        _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x1c);
                                                    } else {
                                                        if (_0x5d86f9 == 0xa) {
                                                            _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x19);
                                                        } else {
                                                            if (_0x5d86f9 == 0xb) {
                                                                _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x17);
                                                            } else {
                                                                if (_0x5d86f9 == 0xc) {
                                                                    _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x15);
                                                                } else {
                                                                    if (_0x5d86f9 == 0xd) {
                                                                        _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x13);
                                                                    } else {
                                                                        if (_0x5d86f9 == 0xe) {
                                                                            _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x12);
                                                                        } else {
                                                                            if (_0x5d86f9 == 0xf) {
                                                                                _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x11);
                                                                            } else {
                                                                                if (_0x5d86f9 == 0x10) {
                                                                                    _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0x10);
                                                                                } else {
                                                                                    if (_0x5d86f9 == 0x11) {
                                                                                        _0x4209b8[_0x5d86f9] = Math['round'](Math['random']() * 0xf);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            ws['oldSend'](_0x4209b8);
        }
        ch('Wtf\x20Crash:>');
    }
    if (_0x44210d['keyCode'] == 0x4c && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        autoaim = !![];
        doNewSend([
            'c',
            [0x1]
        ]);
        doNewSend([
            '5',
            [
                secondary,
                !![]
            ]
        ]);
        setTimeout(() => {
            doNewSend([
                '6',
                [0xc]
            ]);
        }, 0x64);
        setTimeout(() => {
            doNewSend([
                '6',
                [0xf]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x35,
                    0x0
                ]
            ]);
        }, 0x12c);
        setTimeout(() => {
            doNewSend([
                'c',
                [0x0]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x6,
                    0x0
                ]
            ]);
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            autoaim = ![];
        }, 0x190);
    }
    if (AutoInsta == !![]) {
        if (Math['sqrt'](Math['pow'](myPlayer['y'] - nearestEnemy[0x2], 0x2) + Math['pow'](myPlayer['x'] - nearestEnemy[0x1], 0x2)) < 0xe6) {
            autoaim = !![];
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x7,
                    0x0
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x0,
                    0x1
                ]
            ]);
            doNewSend([
                'c',
                [0x1]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x15,
                    0x1
                ]
            ]);
            setTimeout(() => {
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x35,
                        0x0
                    ]
                ]);
                doNewSend([
                    '5',
                    [
                        secondary,
                        !![]
                    ]
                ]);
                AutoInsta = !![];
            }, instaSpeed - 0x6e);
            setTimeout(() => {
                doNewSend([
                    '5',
                    [
                        primary,
                        !![]
                    ]
                ]);
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x6,
                        0x0
                    ]
                ]);
                autoaim = ![];
                doNewSend([
                    'ch',
                    ['AutoInsta!!']
                ]);
            }, instaSpeed);
            setTimeout(() => {
                doNewSend([
                    '5',
                    [
                        secondary,
                        !![]
                    ]
                ]);
                doNewSend([
                    'ch',
                    ['AutoReload.']
                ]);
            }, instaSpeed + 0x64);
            setTimeout(() => {
                doNewSend([
                    '5',
                    [
                        secondary,
                        !![]
                    ]
                ]);
                doNewSend([
                    'ch',
                    ['AutoReload..']
                ]);
                doNewSend([
                    'c',
                    [
                        0x0,
                        null
                    ]
                ]);
            }, instaSpeed + 0x258);
            setTimeout(() => {
                doNewSend([
                    '5',
                    [
                        secondary,
                        !![]
                    ]
                ]);
                doNewSend([
                    'ch',
                    ['AutoReload...']
                ]);
            }, instaSpeed + 0x44c);
            setTimeout(() => {
                doNewSend([
                    '5',
                    [
                        primary,
                        !![]
                    ]
                ]);
                doNewSend([
                    'ch',
                    ['AutoReloaded']
                ]);
            }, instaSpeed + 0x6a4);
        }
    }
});
document['addEventListener']('keyup', _0x3b4512 => {
    dashing['stop'](_0x3b4512['keyCode']);
    spikePlacer['stop'](_0x3b4512['keyCode']);
    boostPlacer['stop'](_0x3b4512['keyCode']);
    boostSpiker['stop'](_0x3b4512['keyCode']);
    millPlacer['stop'](_0x3b4512['keyCode']);
    turretPlacer['stop'](_0x3b4512['keyCode']);
    healer['stop'](_0x3b4512['keyCode']);
    fourSpawnpader['stop'](_0x3b4512['keyCode']);
    if (_0x3b4512['keyCode'] == 0x47 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        setTimeout(() => {
            doNewSend([
                '33',
                [null]
            ]);
            boostDir = null;
        }, 0xa);
    }
});
function isElementVisible(_0x569b21) {
    return _0x569b21['offsetParent'] !== null;
}
function toRad(_0x3ed3c2) {
    return _0x3ed3c2 * 0.01745329251;
}
function dist(_0x130a73, _0xffb663) {
    return Math['sqrt'](Math['pow'](_0xffb663['y'] - _0x130a73[0x2], 0x2) + Math['pow'](_0xffb663['x'] - _0x130a73[0x1], 0x2));
}
document['getElementById']('gameName')['innerHTML'] = 'ClaudeMod';
document['getElementById']('enterGame')['innerHTML'] = 'NeverGiveUp';
document['getElementById']('enterGame')['blur']();
document['getElementById']('setupCard')['style'] = 'box-shadow:\x20#3DFFBF\x201px\x201px\x2040px;';
document['getElementById']('guideCard')['style'] = 'box-shadow:\x20#3DFFBF\x201px\x201px\x2040px;';
document['getElementById']('gameName')['style'] = 'text-shadow:\x20#3DFFBF\x201px\x201px\x2040px;';
document['getElementById']('enterGame')['style'] = 'text-shadow:\x20#3DFFBF\x201px\x201px\x2040px;';
document['getElementById']('loadingText')['innerHTML'] = 'LoAdInG...';
document['querySelector']('#leaderboard')['appendChild'](function () {
    let _0x594c34 = 'ping:\x20';
    let _0x5f04dc = 0x0;
    const _0x28e7f0 = document['createElement']('span');
    _0x28e7f0['id'] = 'pingTime';
    _0x28e7f0['textContent'] = _0x594c34;
    _0x28e7f0['style']['display'] = 'inline-block';
    setInterval(function () {
        typeof pingTime !== 'undefined' && _0x5f04dc !== pingTime && (_0x5f04dc = pingTime, _0x28e7f0['textContent'] = _0x594c34 + _0x5f04dc, function () {
            if (_0x5f04dc <= 0x46) {
                _0x28e7f0['style']['color'] = 'cyan';
            }
            if (_0x5f04dc >= 0x46 && _0x5f04dc <= 0x65) {
                _0x28e7f0['style']['color'] = 'lime';
            }
            if (_0x5f04dc >= 0x65 && _0x5f04dc <= 0xfa) {
                _0x28e7f0['style']['color'] = 'yellow';
            }
            if (_0x5f04dc >= 0xfb) {
                _0x28e7f0['style']['color'] = 'red';
            }
        }());
    });
    return _0x28e7f0;
}());
document['title'] = 'xXClaudeXx\x20Mod';
function update() {
    if (isElementVisible(document['getElementById']('actionBarItem16'))) {
        lmao = 0x10;
    }
    if (isElementVisible(document['getElementById']('actionBarItem17'))) {
        lmao = 0x11;
    }
    if (isElementVisible(document['getElementById']('actionBarItem18'))) {
        lmao = 0x11;
    }
    for (let _0x190cb0 = 0x0; _0x190cb0 < 0x9; _0x190cb0++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x190cb0['toString']()))) {
            primary = _0x190cb0;
        }
    }
    for (let _0xd9f1cb = 0x9; _0xd9f1cb < 0x10; _0xd9f1cb++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0xd9f1cb['toString']()))) {
            secondary = _0xd9f1cb;
        }
    }
    for (let _0x553a59 = 0x10; _0x553a59 < 0x13; _0x553a59++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x553a59['toString']()))) {
            foodType = _0x553a59 - 0x10;
        }
    }
    for (let _0xf48c8e = 0x13; _0xf48c8e < 0x16; _0xf48c8e++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0xf48c8e['toString']()))) {
            wallType = _0xf48c8e - 0x10;
        }
    }
    for (let _0x3786df = 0x16; _0x3786df < 0x1a; _0x3786df++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x3786df['toString']()))) {
            spikeType = _0x3786df - 0x10;
        }
    }
    for (let _0x6ce8cf = 0x1a; _0x6ce8cf < 0x1d; _0x6ce8cf++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x6ce8cf['toString']()))) {
            millType = _0x6ce8cf - 0x10;
        }
    }
    for (let _0x43adf6 = 0x1d; _0x43adf6 < 0x1f; _0x43adf6++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x43adf6['toString']()))) {
            mineType = _0x43adf6 - 0x10;
        }
    }
    for (let _0x30852f = 0x1f; _0x30852f < 0x21; _0x30852f++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x30852f['toString']()))) {
            boostType = _0x30852f - 0x10;
        }
    }
    for (let _0x377863 = 0x21; _0x377863 < 0x24; _0x377863++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x377863['toString']()))) {
            turretType = _0x377863 - 0x10;
        }
    }
    for (let _0x34cdac = 0x24; _0x34cdac < 0x25; _0x34cdac++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x34cdac['toString']()))) {
            spawnpadType = _0x34cdac - 0x10;
        }
    }
    for (let _0x451f17 = 0x25; _0x451f17 < 0x27; _0x451f17++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x451f17['toString']()))) {
            turretType = _0x451f17 - 0x10;
        }
    }
}
var weapons = [
    {
        'id': 0x0,
        'type': 0x0,
        'name': 'tool\x20hammer',
        'desc': 'tool\x20for\x20gathering\x20all\x20resources',
        'src': 'hammer_1',
        'length': 0x8c,
        'width': 0x8c,
        'xOff': -0x3,
        'yOff': 0x12,
        'dmg': 0x19,
        'range': 0x41,
        'gather': 0x1,
        'speed': 0x12c
    },
    {
        'id': 0x1,
        'type': 0x0,
        'age': 0x2,
        'name': 'hand\x20axe',
        'desc': 'gathers\x20resources\x20at\x20a\x20higher\x20rate',
        'src': 'axe_1',
        'length': 0x8c,
        'width': 0x8c,
        'xOff': 0x3,
        'yOff': 0x18,
        'dmg': 0x1e,
        'spdMult': 0x1,
        'range': 0x46,
        'gather': 0x2,
        'speed': 0x190
    },
    {
        'id': 0x2,
        'type': 0x0,
        'age': 0x8,
        'name': 'great\x20axe',
        'desc': 'deal\x20more\x20damage\x20and\x20gather\x20more\x20resources',
        'src': 'great_axe_1',
        'length': 0x8c,
        'width': 0x8c,
        'xOff': -0x8,
        'yOff': 0x19,
        'dmg': 0x23,
        'spdMult': 0x1,
        'range': 0x4b,
        'gather': 0x4,
        'speed': 0x190
    },
    {
        'id': 0x3,
        'type': 0x0,
        'age': 0x2,
        'name': 'short\x20sword',
        'desc': 'increased\x20attack\x20power\x20but\x20slower\x20move\x20speed',
        'src': 'sword_1',
        'iPad': 1.3,
        'length': 0x82,
        'width': 0xd2,
        'xOff': -0x8,
        'yOff': 0x2e,
        'dmg': 0x23,
        'spdMult': 0.85,
        'range': 0x6e,
        'gather': 0x1,
        'speed': 0x12c
    },
    {
        'id': 0x4,
        'type': 0x0,
        'age': 0x8,
        'name': 'katana',
        'desc': 'greater\x20range\x20and\x20damage',
        'src': 'samurai_1',
        'iPad': 1.3,
        'length': 0x82,
        'width': 0xd2,
        'xOff': -0x8,
        'yOff': 0x3b,
        'dmg': 0x28,
        'spdMult': 0.8,
        'range': 0x76,
        'gather': 0x1,
        'speed': 0x12c
    },
    {
        'id': 0x5,
        'type': 0x0,
        'age': 0x2,
        'name': 'polearm',
        'desc': 'long\x20range\x20melee\x20weapon',
        'src': 'spear_1',
        'iPad': 1.3,
        'length': 0x82,
        'width': 0xd2,
        'xOff': -0x8,
        'yOff': 0x35,
        'dmg': 0x2d,
        'knock': 0.2,
        'spdMult': 0.82,
        'range': 0x8e,
        'gather': 0x1,
        'speed': 0x2bc
    },
    {
        'id': 0x6,
        'type': 0x0,
        'age': 0x2,
        'name': 'bat',
        'desc': 'fast\x20long\x20range\x20melee\x20weapon',
        'src': 'bat_1',
        'iPad': 1.3,
        'length': 0x6e,
        'width': 0xb4,
        'xOff': -0x8,
        'yOff': 0x35,
        'dmg': 0x14,
        'knock': 0.7,
        'range': 0x6e,
        'gather': 0x1,
        'speed': 0x12c
    },
    {
        'id': 0x7,
        'type': 0x0,
        'age': 0x2,
        'name': 'daggers',
        'desc': 'really\x20fast\x20short\x20range\x20weapon',
        'src': 'dagger_1',
        'iPad': 0.8,
        'length': 0x6e,
        'width': 0x6e,
        'xOff': 0x12,
        'yOff': 0x0,
        'dmg': 0x14,
        'knock': 0.1,
        'range': 0x41,
        'gather': 0x1,
        'hitSlow': 0.1,
        'spdMult': 1.13,
        'speed': 0x64
    },
    {
        'id': 0x8,
        'type': 0x0,
        'age': 0x2,
        'name': 'stick',
        'desc': 'great\x20for\x20gathering\x20but\x20very\x20weak',
        'src': 'stick_1',
        'length': 0x8c,
        'width': 0x8c,
        'xOff': 0x3,
        'yOff': 0x18,
        'dmg': 0x1,
        'spdMult': 0x1,
        'range': 0x46,
        'gather': 0x7,
        'speed': 0x190
    },
    {
        'id': 0x9,
        'type': 0x1,
        'age': 0x6,
        'name': 'hunting\x20bow',
        'desc': 'bow\x20used\x20for\x20ranged\x20combat\x20and\x20hunting',
        'src': 'bow_1',
        'req': [
            'wood',
            0x4
        ],
        'length': 0x78,
        'width': 0x78,
        'xOff': -0x6,
        'yOff': 0x0,
        'projectile': 0x0,
        'spdMult': 0.75,
        'speed': 0x258
    },
    {
        'id': 0xa,
        'type': 0x1,
        'age': 0x6,
        'name': 'great\x20hammer',
        'desc': 'hammer\x20used\x20for\x20destroying\x20structures',
        'src': 'great_hammer_1',
        'length': 0x8c,
        'width': 0x8c,
        'xOff': -0x9,
        'yOff': 0x19,
        'dmg': 0xa,
        'spdMult': 0.88,
        'range': 0x4b,
        'sDmg': 7.5,
        'gather': 0x1,
        'speed': 0x190
    },
    {
        'id': 0xb,
        'type': 0x1,
        'age': 0x6,
        'name': 'wooden\x20shield',
        'desc': 'blocks\x20projectiles\x20and\x20reduces\x20melee\x20damage',
        'src': 'shield_1',
        'length': 0x78,
        'width': 0x78,
        'shield': 0.2,
        'xOff': 0x6,
        'yOff': 0x0,
        'spdMult': 0.7
    },
    {
        'id': 0xc,
        'type': 0x1,
        'age': 0x8,
        'name': 'crossbow',
        'desc': 'deals\x20more\x20damage\x20and\x20has\x20greater\x20range',
        'src': 'crossbow_1',
        'req': [
            'wood',
            0x5
        ],
        'aboveHand': !0x0,
        'armS': 0.75,
        'length': 0x78,
        'width': 0x78,
        'xOff': -0x4,
        'yOff': 0x0,
        'projectile': 0x2,
        'spdMult': 0.7,
        'speed': 0x2bc
    },
    {
        'id': 0xd,
        'type': 0x1,
        'age': 0x9,
        'name': 'repeater\x20crossbow',
        'desc': 'high\x20firerate\x20crossbow\x20with\x20reduced\x20damage',
        'src': 'crossbow_2',
        'req': [
            'wood',
            0xa
        ],
        'aboveHand': !0x0,
        'armS': 0.75,
        'length': 0x78,
        'width': 0x78,
        'xOff': -0x4,
        'yOff': 0x0,
        'projectile': 0x3,
        'spdMult': 0.7,
        'speed': 0xe6
    },
    {
        'id': 0xe,
        'type': 0x1,
        'age': 0x6,
        'name': 'mc\x20grabby',
        'desc': 'steals\x20resources\x20from\x20enemies',
        'src': 'grab_1',
        'length': 0x82,
        'width': 0xd2,
        'xOff': -0x8,
        'yOff': 0x35,
        'dmg': 0x0,
        'steal': 0xfa,
        'knock': 0.2,
        'spdMult': 1.05,
        'range': 0x7d,
        'gather': 0x0,
        'speed': 0x2bc
    },
    {
        'id': 0xf,
        'type': 0x1,
        'age': 0x9,
        'name': 'musket',
        'desc': 'slow\x20firerate\x20but\x20high\x20damage\x20and\x20range',
        'src': 'musket_1',
        'req': [
            'stone',
            0xa
        ],
        'aboveHand': !0x0,
        'rec': 0.35,
        'armS': 0.6,
        'hndS': 0.3,
        'hndD': 1.6,
        'length': 0x12c,
        'width': 0xcd,
        'xOff': 0x19,
        'yOff': 0x0,
        'projectile': 0x5,
        'hideProjectile': !0x0,
        'spdMult': 0.6,
        'speed': 0x5dc
    }
];
