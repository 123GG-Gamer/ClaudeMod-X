var _0x1b3ba2 = function () {
    var _0x15523a = !![];
    return function (_0x36fe9b, _0x428b3b) {
        var _0x4b6843 = _0x15523a ? function () {
            if (_0x428b3b) {
                var _0x16fac5 = _0x428b3b['apply'](_0x36fe9b, arguments);
                _0x428b3b = null;
                return _0x16fac5;
            }
        } : function () {
        };
        _0x15523a = ![];
        return _0x4b6843;
    };
}();
var _0x3d09cf = _0x1b3ba2(this, function () {
    var _0x193008 = function () {
        var _0x3378a5;
        try {
            _0x3378a5 = Function('return\x20(function()\x20' + '{}.constructor(\x22return\x20this\x22)(\x20)' + ');')();
        } catch (_0x5461fe) {
            _0x3378a5 = window;
        }
        return _0x3378a5;
    };
    var _0x5a3631 = _0x193008();
    var _0x4cfacc = _0x5a3631['console'] = _0x5a3631['console'] || {};
    var _0x3ed929 = [
        'log',
        'warn',
        'info',
        'error',
        'exception',
        'table',
        'trace'
    ];
    for (var _0x1fbd47 = 0x0; _0x1fbd47 < _0x3ed929['length']; _0x1fbd47++) {
        var _0xcd667d = _0x1b3ba2['constructor']['prototype']['bind'](_0x1b3ba2);
        var _0x3c1497 = _0x3ed929[_0x1fbd47];
        var _0x17aa4e = _0x4cfacc[_0x3c1497] || _0xcd667d;
        _0xcd667d['__proto__'] = _0x1b3ba2['bind'](_0x1b3ba2);
        _0xcd667d['toString'] = _0x17aa4e['toString']['bind'](_0x17aa4e);
        _0x4cfacc[_0x3c1497] = _0xcd667d;
    }
});
_0x3d09cf();
var newImg = document['createElement']('img');
newImg['src'] = 'https://i.imgur.com/OZL1PXR.png';
newImg['style'] = 'position:\x20absolute;\x20top:\x2015px;\x20left:\x2015px;\x20z-index:\x20100000;\x20width:\x2050px;\x20height:\x2050px;\x20cursor:\x20pointer;';
document['body']['prepend'](newImg);
newImg['addEventListener']('click', () => {
    if (modal['style']['display'] = 'none') {
        modal['style']['display'] = 'block';
    } else {
        modal['style']['display'] = 'none';
    }
});
var newIm = document['createElement']('img');
newIm['src'] = 'https://media1.giphy.com/media/1adEC0Iyx3Uug7C9ta/source.gif';
newIm['style'] = 'position:\x20absolute;\x20top:\x2015px;\x20right:\x2015px;\x20z-index:\x20100000;\x20width:\x20100px;\x20height:\x20100px;\x20cursor:\x20pointer;';
document['body']['prepend'](newIm);
newIm['addEventListener']('click', () => {
    if (spin == ![]) {
        spin = !![];
    } else {
        spin = ![];
    }
});
$('#youtuberOf')['css']({ 'display': 'none' });
setInterval(function () {
    document['querySelector']('#pre-content-container')['style']['display'] = 'none';
    window['location']['native_resolution'] = !![];
}, 0x3e8);
$('#enterGame')['click'](() => {
    ccat = 0x0;
    selectskincolor('constructor');
    lmao = 0x10;
});
let hue = 0x0;
let replaceInterval = setInterval(() => {
    if (CanvasRenderingContext2D['prototype']['roundRect']) {
        CanvasRenderingContext2D['prototype']['roundRect'] = (_0x178137 => function () {
            if (this['fillStyle'] == '#8ecc51')
                this['fillStyle'] = 'hsl(180,\x20100%,\x2050%)';
            return _0x178137['call'](this, ...arguments);
        })(CanvasRenderingContext2D['prototype']['roundRect']);
        clearInterval(replaceInterval);
    }
}, 0xa);
function changeHue() {
    hue += Math['random']() * 0xa;
}
setInterval(changeHue, 0xa);
var test = 0x0;
var ID_WinterCap = 0xf;
var ID_FlipperHat = 0x1f;
var ID_MarksmanCap = 0x1;
var ID_BushGear = 0xa;
var ID_SoldierHelmet = 0x6;
var ID_AntiVenomGear = 0x17;
var ID_MusketeerHat = 0x20;
var ID_MedicGear = 0xd;
var ID_BullHelmet = 0x7;
var ID_EmpHelmet = 0x16;
var ID_BoosterHat = 0xc;
var ID_BarbarianArmor = 0x1a;
var ID_BullMask = 0x2e;
var ID_WindmillHat = 0xe;
var ID_SpikeGear = 0xb;
var ID_BushidoArmor = 0x10;
var ID_SamuraiArmor = 0x14;
var ID_ScavengerGear = 0x1b;
var ID_TankGear = 0x28;
var ID_TurretGear = 0x35;
var TankGearKey = 0x5a;
var BullHelmetKey = 0x4a;
var SoldierHelmetKey = 0x43;
var TurretKey = 0x4b;
var BoosterHatKey = 0x42;
var uneqiup = 0x10;
var SpikeGearKey = 0x59;
var EmpKey = 0x30;
var SamuKey = 0x4f;
var SpikeKey = 0x56;
var PitKey = 0x46;
var PikeKey = 0x56;
var WindKey = 0x4e;
try {
    document['getElementById']('moomooio_728x90_home')['style']['display'] = 'none';
    $('moomooio728x90_home')['parent']()['css']({ 'display': 'none' });
} catch (_0x37cd09) {
    console['log']('There\x20was\x20an\x20error\x20removing\x20the\x20ads.');
}
var menuChange = document['createElement']('div');
menuChange['className'] = 'menuCard';
menuChange['id'] = 'mainSettings';
menuChange['innerHTML'] = '\x0a<div\x20id=\x22simpleModal\x22\x20class=\x22modal\x22>\x0a\x20\x20\x20\x20<div\x20class=\x22modal-content\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22modal-header\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<span\x20class=\x22closeBtn\x22>&times;</span>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h2\x20style=\x22font-size:\x2017px;\x22>Claude\x20Mod</h2>\x0a\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22modal-body\x22\x20style=\x22font-size:\x2017px;\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22flexControl\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<br><h3\x20class=\x22menuPrompt\x22>Tank\x20Gear:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](TankGearKey) + '\x22\x20id=\x22tankGear\x22\x20class=\x22keyPressLow\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20maxlength=\x221\x22\x20type=\x22text\x22/>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h3\x20class=\x22menuPrompt\x22>Bull\x20Helmet:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](BullHelmetKey) + '\x22\x20id=\x22bullHelm\x22\x20class=\x22keyPressLow\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20maxlength=\x221\x22\x20type=\x22text\x22/><br>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<br><h3\x20class=\x22menuPrompt\x22>Soldier\x20Helmet:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](SoldierHelmetKey) + '\x22\x20id=\x22soldier\x22\x20class=\x22keyPressLow\x22onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20\x20maxlength=\x221\x22\x20type=\x22text\x22/>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h3\x20class=\x22menuPrompt\x22>Turret\x20Gear:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](TurretKey) + '\x22\x20id=\x22turret\x22\x20class=\x22keyPressLow\x22\x20maxlength=\x221\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20type=\x22text\x22/><br>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<br><h3\x20class=\x22menuPrompt\x22>Barbarian\x20Hat:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](BoosterHatKey) + '\x22\x20id=\x22booster\x22\x20class=\x22keyPressLow\x22\x20maxlength=\x221\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20type=\x22text\x22/>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h3\x20class=\x22menuPrompt\x22>Spike\x20Gear:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](SpikeGearKey) + '\x22\x20id=\x22spikeg\x22\x20class=\x22keyPressLow\x22\x20maxlength=\x221\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20type=\x22text\x22/><br>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<br><h3\x20class=\x22menuPrompt\x22>Emp\x20Helmet:\x20</h3>\x20<input\x20value=\x22' + String['fromCharCode'](EmpKey) + '\x22\x20id=\x22emp\x22\x20class=\x22keyPressLow\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20maxlength=\x221\x22\x20type=\x22text\x22/>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h3\x20class=\x22menuPrompt\x22>Samurai\x20Armor:</h3>\x20<input\x20value=\x22' + String['fromCharCode'](SamuKey) + '\x22\x20id=\x22samu\x22\x20class=\x22keyPressLow\x22\x20onkeyup=\x22this.value\x20=\x20this.value.toUpperCase();\x22\x20maxlength=\x221\x22\x20type=\x22text\x22/><br>\x0a<label\x20class=\x22container\x22>Detecor\x20(Hat,\x20Weapon\x20,Health,\x20Damage,\x20ect\x20ect)\x0a<input\x20type=\x22checkbox\x22\x20id=\x22dd\x22>\x0a<span\x20class=\x22checkmark\x22></span>\x0a<br><label\x20class=\x22container\x22>AutoBreak!\x0a<input\x20type=\x22checkbox\x22\x20id=\x22ab\x22>\x0a<span\x20class=\x22checkmark\x22></span>\x0a<h3\x20style=\x22font-size:\x2017px;\x22>\x20NEFFEX\x20-\x20Never\x20Give\x20Up\x20☝️\x20[Copyright\x20Free]\x20</h3>\x0a<iframe\x20width=\x22703\x22\x20height=\x22380\x22\x20src=\x22https://www.youtube.com/embed/_70Q-Xj3rEo\x22\x20frameborder=\x220\x22\x20allow=\x22accelerometer;\x20autoplay;\x20clipboard-write;\x20encrypted-media;\x20gyroscope;\x20picture-in-picture\x22\x20allowfullscreen></iframe>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22modal-footer\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h3\x20style=\x22font-size:\x2017px;\x22>This\x20Op\x20Mod</h3>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<p>Sub\x20to\x20[GG]GAMER</p>\x0a\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20</div>\x0a</div>\x0a';
document['body']['appendChild'](menuChange);
$('#tankGear')['on']('input', () => {
    var _0x51c173 = $('#tankGear')['val']();
    if (_0x51c173) {
        TankGearKey = _0x51c173['toUpperCase']();
        TankGearKey = TankGearKey['charCodeAt'](0x0);
        console['log'](TankGearKey);
    }
});
$('#bullHelm')['on']('input', () => {
    var _0x42f71f = $('#bullHelm')['val']();
    if (_0x42f71f) {
        BullHelmetKey = _0x42f71f['toUpperCase']();
        BullHelmetKey = BullHelmetKey['charCodeAt'](0x0);
        console['log'](BullHelmetKey);
    }
});
$('#soldier')['on']('input', () => {
    var _0x2025de = $('#soldier')['val']();
    if (_0x2025de) {
        SoldierHelmetKey = _0x2025de['toUpperCase']();
        SoldierHelmetKey = SoldierHelmetKey['charCodeAt'](0x0);
        console['log'](SoldierHelmetKey);
    }
});
$('#turret')['on']('input', () => {
    var _0x1327b2 = $('#turret')['val']();
    if (_0x1327b2) {
        TurretKey = _0x1327b2['toUpperCase']();
        TurretKey = TurretKey['charCodeAt'](0x0);
        console['log'](TurretKey);
    }
});
$('#emp')['on']('input', () => {
    var _0x496f10 = $('#emp')['val']();
    if (_0x496f10) {
        EmpKey = _0x496f10['toUpperCase']();
        EmpKey = EmpKey['charCodeAt'](0x0);
        console['log'](EmpKey);
    }
});
$('#samu')['on']('input', () => {
    var _0x59a20d = $('#samu')['val']();
    if (_0x59a20d) {
        SamuKey = _0x59a20d['toUpperCase']();
        SamuKey = SamuKey['charCodeAt'](0x0);
        console['log'](SamuKey);
    }
});
$('#pit')['on']('input', () => {
    var _0xfe031 = $('#pit')['val']();
    if (_0xfe031) {
        PitKey = _0xfe031['toUpperCase']();
        PitKey = PitKey['charCodeAt'](0x0);
        console['log'](PitKey);
    }
});
$('#pike')['on']('input', () => {
    var _0x50a097 = $('#pike')['val']();
    if (_0x50a097) {
        PikeKey = _0x50a097['toUpperCase']();
        PikeKey = PikeKey['charCodeAt'](0x0);
        console['log'](PikeKey);
    }
});
$('#booster')['on']('input', () => {
    var _0x2e36ae = $('#booster')['val']();
    if (_0x2e36ae) {
        BoosterHatKey = _0x2e36ae['toUpperCase']();
        BoosterHatKey = BoosterHatKey['charCodeAt'](0x0);
        console['log'](BoosterHatKey);
    }
});
var styleItem = document['createElement']('style');
styleItem['type'] = 'text/css';
styleItem['appendChild'](document['createTextNode']('\x0a.keyPressLow\x20{\x0a\x20\x20\x20\x20margin-left:\x2010px;\x0a\x20\x20\x20\x20font-size:\x2016px;\x0a\x20\x20\x20\x20margin-right:\x208px;\x0a\x20\x20\x20\x20height:\x2050px;\x0a\x20\x20\x20\x20width:\x2070px;\x0a\x20\x20\x20\x20background-color:\x20#fcfcfc;\x0a\x20\x20\x20\x20border-radius:\x200px;\x0a\x20\x20\x20\x20border:\x20none;\x0a\x20\x20\x20\x20text-align:\x20center;\x0a\x20\x20\x20\x20color:\x20#4A4A4A;\x0a\x20\x20\x20\x20border:\x200.5px\x20solid\x20#f2f2f2;\x0a}\x0a.menuPrompt\x20{\x0a\x20\x20\x20\x20font-size:\x2020px;\x0a\x20\x20\x20\x20font-family:\x20\x27Hammersmith\x20One\x27;\x0a\x20\x20\x20\x20color:\x20#4A4A4A;\x0a\x20\x20\x20\x20flex:\x200.2;\x0a\x20\x20\x20\x20text-align:\x20center;\x0a\x20\x20\x20\x20margin-top:\x2025px;\x0a\x20\x20\x20\x20display:\x20inline-block;\x0a}\x0a\x0a.modal\x20{\x0a\x20\x20\x20\x20display:\x20none;\x0a\x20\x20\x20\x20position:\x20fixed;\x0a\x20\x20\x20\x20z-index:\x201;\x0a\x20\x20\x20\x20left:\x200;\x0a\x20\x20\x20\x20top:\x200;\x0a\x20\x20\x20\x20overflow:\x20auto;\x0a\x20\x20\x20\x20height:\x20100%;\x0a\x20\x20\x20\x20width:\x20100%;\x0a}\x0a\x0a.modal-content\x20{\x0a\x20\x20\x20\x20margin:\x2010%\x20auto;\x0a\x20\x20\x20\x20width:\x2040%;\x0a\x20\x20\x20\x20box-shadow:\x200\x205px\x208px\x200\x20rgba(0,\x200,\x200,\x200.2),\x200\x207px\x2020px\x200\x20rgba(0,\x200,\x200,\x200.17);\x0a\x20\x20\x20\x20font-size:\x2014px;\x0a\x20\x20\x20\x20line-height:\x201.6;\x0a}\x0a\x0a.modal-header\x20h2,\x0a.modal-footer\x20h3\x20{\x0a\x20\x20margin:\x200;\x0a}\x0a\x0a.modal-header\x20{\x0a\x20\x20\x20\x20background:\x20#cf2727;\x0a\x20\x20\x20\x20padding:\x2015px;\x0a\x20\x20\x20\x20color:\x20#fff;\x0a\x20\x20\x20\x20border-top-left-radius:\x205px;\x0a\x20\x20\x20\x20border-top-right-radius:\x205px;\x0a}\x0a\x0a.modal-body\x20{\x0a\x20\x20\x20\x20padding:\x2010px\x2020px;\x0a\x20\x20\x20\x20background:\x20#fff;\x0a}\x0a\x0a.modal-footer\x20{\x0a\x20\x20\x20\x20background:\x20#cffff;\x0a\x20\x20\x20\x20padding:\x2010px;\x0a\x20\x20\x20\x20color:\x20#fff;\x0a\x20\x20\x20\x20text-align:\x20center;\x0a\x20\x20\x20\x20border-bottom-left-radius:\x205px;\x0a\x20\x20\x20\x20border-bottom-right-radius:\x205px;\x0a}\x0a\x0a.closeBtn\x20{\x0a\x20\x20\x20\x20color:\x20#ccc;\x0a\x20\x20\x20\x20float:\x20right;\x0a\x20\x20\x20\x20font-size:\x2030px;\x0a\x20\x20\x20\x20color:\x20#fff;\x0a}\x0a\x0a.closeBtn:hover,\x0a.closeBtn:focus\x20{\x0a\x20\x20\x20\x20color:\x20#000;\x0a\x20\x20\x20\x20text-decoration:\x20none;\x0a\x20\x20\x20\x20cursor:\x20pointer;\x0a}\x0a\x0a/*\x20Customize\x20the\x20label\x20(the\x20container)\x20*/\x0a.container\x20{\x0a\x20\x20display:\x20block;\x0a\x20\x20position:\x20relative;\x0a\x20\x20padding-left:\x2035px;\x0a\x20\x20margin-bottom:\x2012px;\x0a\x20\x20cursor:\x20pointer;\x0a\x20\x20font-size:\x2016px;\x0a\x20\x20-webkit-user-select:\x20none;\x0a\x20\x20-moz-user-select:\x20none;\x0a\x20\x20-ms-user-select:\x20none;\x0a\x20\x20user-select:\x20none;\x0a}\x0a\x0a/*\x20Hide\x20the\x20browser\x27s\x20default\x20checkbox\x20*/\x0a.container\x20input\x20{\x0a\x20\x20position:\x20absolute;\x0a\x20\x20opacity:\x200;\x0a\x20\x20cursor:\x20pointer;\x0a\x20\x20height:\x200;\x0a\x20\x20width:\x200;\x0a}\x0a\x0a/*\x20Create\x20a\x20custom\x20checkbox\x20*/\x0a.checkmark\x20{\x0a\x20\x20position:\x20absolute;\x0a\x20\x20top:\x200;\x0a\x20\x20left:\x200;\x0a\x20\x20height:\x2025px;\x0a\x20\x20width:\x2025px;\x0a\x20\x20background-color:\x20#eee;\x0a}\x0a\x0a/*\x20On\x20mouse-over,\x20add\x20a\x20grey\x20background\x20color\x20*/\x0a.container:hover\x20input\x20~\x20.checkmark\x20{\x0a\x20\x20background-color:\x20#00cc0c;\x0a}\x0a\x0a/*\x20When\x20the\x20checkbox\x20is\x20checked,\x20add\x20a\x20red\x20background\x20*/\x0a.container\x20input:checked\x20~\x20.checkmark\x20{\x0a\x20\x20background-color:\x20#cf2727;\x0a}\x0a\x0a/*\x20Create\x20the\x20checkmark/indicator\x20(hidden\x20when\x20not\x20checked)\x20*/\x0a.checkmark:after\x20{\x0a\x20\x20content:\x20\x22\x22;\x0a\x20\x20position:\x20absolute;\x0a\x20\x20display:\x20none;\x0a}\x0a\x0a/*\x20Show\x20the\x20checkmark\x20when\x20checked\x20*/\x0a.container\x20input:checked\x20~\x20.checkmark:after\x20{\x0a\x20\x20display:\x20block;\x0a}\x0a\x0a/*\x20Style\x20the\x20checkmark/indicator\x20*/\x0a.container\x20.checkmark:after\x20{\x0a\x20\x20left:\x209px;\x0a\x20\x20top:\x205px;\x0a\x20\x20width:\x205px;\x0a\x20\x20height:\x2010px;\x0a\x20\x20border:\x20solid\x20white;\x0a\x20\x20border-width:\x200\x203px\x203px\x200;\x0a\x20\x20-webkit-transform:\x20rotate(45deg);\x0a\x20\x20-ms-transform:\x20rotate(45deg);\x0a\x20\x20transform:\x20rotate(45deg);\x0a}\x0a\x0a'));
document['head']['appendChild'](styleItem);
$('#adCard')['css']({ 'display': 'none' });
$('#pre-content-container')['css']({ 'display': 'none' });
document['addEventListener']('keydown', function (_0x55ec23) {
    if (_0x55ec23['keyCode'] == uneqiup && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        console['log']('done');
        storeEquip(0x0);
    } else if (_0x55ec23['keyCode'] == 0x1b) {
        if (modal['style']['display'] = 'none') {
            modal['style']['display'] = 'block';
        } else {
            modal['style']['display'] = 'none';
        }
    } else if (_0x55ec23['keyCode'] == TankGearKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeBuy(ID_TankGear);
        doNewSend([
            'ch',
            ['TankGear:ON']
        ]);
        doNewSend([
            '13c',
            [
                0x1,
                0x28,
                0x0
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x28,
                0x0
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x1,
                0x15,
                0x1
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x15,
                0x1
            ]
        ]);
    } else if (_0x55ec23['keyCode'] == SoldierHelmetKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(ID_SoldierHelmet);
        storeBuy(ID_SoldierHelmet);
        doNewSend([
            'ch',
            ['SoldierHelmet:ON']
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x15,
                0x1
            ]
        ]);
    } else if (_0x55ec23['keyCode'] == BullHelmetKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(ID_BullHelmet);
        storeBuy(ID_BullHelmet);
        doNewSend([
            'ch',
            ['BullHelmet:ON']
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x12,
                0x1
            ]
        ]);
    } else if (_0x55ec23['keyCode'] == BoosterHatKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(0x1a);
        storeBuy(0x1a);
        acc(0x13);
    } else if (_0x55ec23['keyCode'] == EmpKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(ID_EmpHelmet);
        storeBuy(ID_EmpHelmet);
    } else if (_0x55ec23['keyCode'] == SamuKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(ID_SamuraiArmor);
        storeBuy(ID_SamuraiArmor);
        doNewSend([
            'ch',
            ['SamuraiArmor:ON']
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x12,
                0x1
            ]
        ]);
    } else if (_0x55ec23['keyCode'] == SpikeGearKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(ID_SpikeGear);
        storeBuy(ID_SpikeGear);
        acc(0x15);
    } else if (_0x55ec23['keyCode'] == TurretKey && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        storeEquip(ID_TurretGear);
        storeBuy(ID_TurretGear);
        doNewSend([
            'ch',
            ['TurretGear:ON']
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x15,
                0x1
            ]
        ]);
    }
});
var modal = document['getElementById']('simpleModal');
var closeBtn = document['getElementsByClassName']('closeBtn')[0x0];
closeBtn['addEventListener']('click', closeModal);
window['addEventListener']('click', outsideClick);
function ch(_0x2e2ecb) {
    doNewSend([
        'ch',
        [_0x2e2ecb]
    ]);
}
function invis() {
    doNewSend([
        '5',
        [
            'length',
            !0x0
        ]
    ]);
    ch('InvisibleWeapon\x20By\x20[GG]GAMER');
}
function closeModal() {
    modal['style']['display'] = 'none';
}
function outsideClick(_0x106b04) {
    if (_0x106b04['target'] == modal) {
        modal['style']['display'] = 'none';
    }
}
var dd = document['querySelector']('#dd');
dd['addEventListener']('change', function () {
    if (this['checked']) {
        dadd = !![];
        doNewSend([
            'ch',
            ['Detector-ON']
        ]);
    } else {
        dadd = ![];
        doNewSend([
            'ch',
            ['Detector-OFF']
        ]);
    }
});
var ab = document['querySelector']('#ab');
ab['addEventListener']('change', function () {
    if (this['checked']) {
        autobreak = !![];
        doNewSend([
            'ch',
            ['AutoBreaker-ON']
        ]);
    } else {
        autobreak = ![];
        doNewSend([
            'ch',
            ['AutoBreaker-OFF']
        ]);
    }
});
window['onbeforeunload'] = null;
let mouseX;
let mouseY;
let width;
let height;
(function () {
    var _0x3cf3e6;
    var _0x4314c8 = !![];
    var _0x335059 = 0x0;
    document['addEventListener']('keydown', function (_0x1c1b8e) {
        if (_0x1c1b8e['keyCode'] == 0xbc && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
            _0x335059 = (_0x335059 + 0x1) % 0x2;
            if (_0x335059 == 0x0) {
                doNewSend([
                    'ch',
                    ['BoostFrozenMillClaude:\x20Off']
                ]);
            } else {
                doNewSend([
                    'ch',
                    ['BoostFrozenMillClaude:\x20On']
                ]);
            }
            _0x1c1b8e['preventDefault']();
            if (_0x4314c8) {
                _0x3cf3e6 = setTimeout(function () {
                    _0x5cfc46();
                }, 0x0);
            } else {
                clearTimeout(_0x3cf3e6);
            }
            _0x4314c8 = !_0x4314c8;
        }
    });
    function _0x5cfc46() {
        clearTimeout(_0x3cf3e6);
        place(millType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x218711a48));
        place(millType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x218711a90));
        place(millType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x218711ad8));
        place(millType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x218711b20));
        place(boostType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x218711b68));
        _0x3cf3e6 = setTimeout(function () {
            _0x5cfc46();
        }, 0xc8);
    }
}());
(function () {
    var _0xa4f737;
    var _0x5cea53;
    var _0x2dac73;
    var _0x487200;
    var _0x4a4469;
    var _0x2a14f7;
    var _0x2f2bec;
    var _0x166fa8;
    var _0x57e369 = !![];
    document['addEventListener']('keydown', function (_0x5b4315) {
        if (_0x5b4315['keyCode'] == 0xbf && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
            _0x5b4315['preventDefault']();
            if (_0x57e369) {
                autoaim = !![];
                doNewSend([
                    '7',
                    [0x2]
                ]);
                _0xa4f737 = setTimeout(function () {
                    AntiBull = !![];
                    autoaim = !![];
                    autoaim = ![];
                    _0x27be0b();
                }, 0x0);
            } else {
                AntiBull = ![];
                autoaim = ![];
                clearTimeout(_0xa4f737);
                clearTimeout(_0x5cea53);
                clearTimeout(_0x2dac73);
                clearTimeout(_0x487200);
                clearTimeout(_0x4a4469);
                clearTimeout(_0x2a14f7);
                clearTimeout(_0x2f2bec);
                clearTimeout(_0x166fa8);
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x2d,
                        0x0
                    ]
                ]);
                doNewSend([
                    '7',
                    [0x2]
                ]);
                doNewSend([
                    '33',
                    [null]
                ]);
                isEnemyNear = ![];
                autoaim = ![];
            }
            _0x57e369 = !_0x57e369;
        }
    });
    function _0x27be0b() {
        if (isEnemyNear == !![]) {
            doNewSend([
                '33',
                [nearestEnemyAngle]
            ]);
            for (let _0x500e00 = 0x0; _0x500e00 < 0x4; _0x500e00++) {
                let _0x19acb1 = place(spikeType, boostDir + toRad(0x5a));
                place(spikeType, boostDir - toRad(0x5a));
                place(boostType, boostDir);
                doNewSend([
                    '33',
                    [boostDir]
                ]);
                place(_0x19acb1);
            }
        }
        clearTimeout(_0xa4f737);
        _0x5cea53 = setTimeout(function () {
            _0x5a4565();
        }, 0x6e);
    }
    function _0x5a4565() {
        if (isEnemyNear == !![]) {
            doNewSend([
                '33',
                [nearestEnemyAngle]
            ]);
            for (let _0x1634b5 = 0x0; _0x1634b5 < 0x1; _0x1634b5++) {
                let _0x45a74d = myPlayer['dir'] + toRad(_0x1634b5 * 0x5a);
                place(boostType, _0x45a74d);
            }
        }
        clearTimeout(_0x5cea53);
        _0x2dac73 = setTimeout(function () {
            _0x16a392();
        }, 0x6e);
    }
    function _0x16a392() {
        if (isEnemyNear == !![]) {
            doNewSend([
                '33',
                [nearestEnemyAngle]
            ]);
            for (let _0x3b1b9e = 0x0; _0x3b1b9e < 0x1; _0x3b1b9e++) {
                let _0x190829 = myPlayer['dir'] + toRad(_0x3b1b9e * 0x5a);
                place(boostType, _0x190829);
            }
        }
        clearTimeout(_0x2dac73);
        _0x487200 = setTimeout(function () {
            _0x46b579();
        }, 0x6e);
    }
    function _0x46b579() {
        if (isEnemyNear == !![]) {
            doNewSend([
                '33',
                [nearestEnemyAngle]
            ]);
            for (let _0x8b7aa6 = 0x0; _0x8b7aa6 < 0x3; _0x8b7aa6++) {
                let _0x3f0bce = myPlayer['dir'] + toRad(_0x8b7aa6 * 0x5a);
                place(spikeType, _0x3f0bce);
            }
        }
        clearTimeout(_0x487200);
        _0x4a4469 = setTimeout(function () {
            _0x4c7082();
        }, 0x6e);
    }
    function _0x4c7082() {
        doNewSend([
            '33',
            [nearestEnemyAngle]
        ]);
        if (isEnemyNear == !![]) {
            for (let _0x2f586d = 0x0; _0x2f586d < 0x1; _0x2f586d++) {
                let _0xdaeb4c = myPlayer['dir'] + toRad(_0x2f586d * 0x5a);
                place(boostType, _0xdaeb4c);
            }
        }
        clearTimeout(_0x4a4469);
        _0x2a14f7 = setTimeout(function () {
            _0x14e1ac();
        }, 0x6e);
    }
    function _0x14e1ac() {
        doNewSend([
            '33',
            [nearestEnemyAngle]
        ]);
        if (isEnemyNear == !![]) {
            for (let _0x2564de = 0x0; _0x2564de < 0x3; _0x2564de++) {
                let _0x5df33f = myPlayer['dir'] + toRad(_0x2564de * 0x5a);
                place(spikeType, _0x5df33f);
            }
        }
        clearTimeout(_0x2a14f7);
        _0x2f2bec = setTimeout(function () {
            _0x15afa9();
        }, 0x6e);
    }
    function _0x15afa9() {
        doNewSend([
            '33',
            [nearestEnemyAngle]
        ]);
        if (isEnemyNear == !![]) {
            for (let _0x4d68c2 = 0x0; _0x4d68c2 < 0x1; _0x4d68c2++) {
                let _0x1fa2ec = myPlayer['dir'] + toRad(_0x4d68c2 * 0x5a);
                place(boostType, _0x1fa2ec);
            }
        }
        clearTimeout(_0x2f2bec);
        _0x166fa8 = setTimeout(function () {
            _0x1a4b40();
        }, 0x6e);
    }
    function _0x1a4b40() {
        doNewSend([
            '33',
            [nearestEnemyAngle]
        ]);
        if (isEnemyNear == !![]) {
            for (let _0x26000f = 0x0; _0x26000f < 0x4; _0x26000f++) {
                let _0x85958 = myPlayer['dir'] + toRad(_0x26000f * 0x5a);
                place(spikeType, _0x85958);
            }
        }
        clearTimeout(_0x166fa8);
        _0xa4f737 = setTimeout(function () {
            _0x27be0b();
        }, 0x6e);
    }
}());
setInterval(() => {
    if (AntiInsta == 0x1) {
        test = 0x1e;
    } else {
        test = 0x0;
    }
}, 0x3e8);
setInterval(() => {
    if (autoaim == !![]) {
        doNewSend([
            '2',
            [nearestEnemyAngle]
        ]);
    }
}, 0x0);
setInterval(() => {
    if (crashing && !closed) {
        for (let _0x49d409 = 0x0; _0x49d409 < 0x1f4; _0x49d409++) {
            let _0x4c983d = new Uint8Array(Math['round'](Math['random']() * 0x32));
            for (let _0x1cb5a6 = 0x0; _0x1cb5a6 < _0x4c983d['length']; _0x1cb5a6++) {
                if (_0x1cb5a6 == 0x0) {
                    _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x1f4);
                } else {
                    if (_0x1cb5a6 == 0x1) {
                        _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x100);
                    } else {
                        if (_0x1cb5a6 == 0x2) {
                            _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x80);
                        } else {
                            if (_0x1cb5a6 == 0x3) {
                                _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x55);
                            } else {
                                if (_0x1cb5a6 == 0x4) {
                                    _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x40);
                                } else {
                                    if (_0x1cb5a6 == 0x5) {
                                        _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x33);
                                    } else {
                                        if (_0x1cb5a6 == 0x6) {
                                            _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x2a);
                                        } else {
                                            if (_0x1cb5a6 == 0x7) {
                                                _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x24);
                                            } else {
                                                if (_0x1cb5a6 == 0x8) {
                                                    _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x20);
                                                } else {
                                                    if (_0x1cb5a6 == 0x9) {
                                                        _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x1c);
                                                    } else {
                                                        if (_0x1cb5a6 == 0xa) {
                                                            _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x19);
                                                        } else {
                                                            if (_0x1cb5a6 == 0xb) {
                                                                _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x17);
                                                            } else {
                                                                if (_0x1cb5a6 == 0xc) {
                                                                    _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x15);
                                                                } else {
                                                                    if (_0x1cb5a6 == 0xd) {
                                                                        _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x13);
                                                                    } else {
                                                                        if (_0x1cb5a6 == 0xe) {
                                                                            _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x12);
                                                                        } else {
                                                                            if (_0x1cb5a6 == 0xf) {
                                                                                _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x11);
                                                                            } else {
                                                                                if (_0x1cb5a6 == 0x10) {
                                                                                    _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0x10);
                                                                                } else {
                                                                                    if (_0x1cb5a6 == 0x11) {
                                                                                        _0x4c983d[_0x1cb5a6] = Math['round'](Math['random']() * 0xf);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            ws['oldSend'](_0x4c983d);
        }
    }
}, 0x0);
setInterval(() => {
    if (hatToggle == 0x1) {
        if (oldHat != normalHat) {
            hat(normalHat);
            console['log']('Tried.\x20-\x20Hat');
        }
        if (oldAcc != normalAcc) {
            acc(normalAcc);
            console['log']('Tried.\x20-\x20Acc');
        }
        oldHat = normalHat;
        oldAcc = normalAcc;
    }
}, 0x19);
setInterval(() => {
    if (qh == 0x1) {
        placeq(foodType, null);
    }
}, 0xa);
setInterval(() => {
    if (spin == !![]) {
        aim(Random(0x0, 0x7d0), Random(0x0, 0x7d0));
    }
}, 0x14);
function Random(_0x452215, _0x4fa18a) {
    return Math['floor'](Math['random']() * _0x4fa18a) + _0x452215;
}
;
function normal() {
    hat(normalHat);
    acc(normalAcc);
}
function aim(_0x179ed1, _0x24cf96) {
    var _0x464558 = document['getElementById']('gameCanvas');
    _0x464558['dispatchEvent'](new MouseEvent('mousemove', {
        'clientX': _0x179ed1,
        'clientY': _0x24cf96
    }));
}
let coreURL = new URL(window['location']['href']);
window['sessionStorage']['force'] = coreURL['searchParams']['get']('fc');
var objects = [];
var frozen = 0x71afd498d0000 + 0xb4;
var autobreak = ![];
var nearestTrapAngle;
var nearestTrap;
var cloning = ![];
var lmao = 0x10;
var dadd = ![];
var ccat = 0x0;
let spin = ![];
let qh = 0x0;
let crashing;
let closed;
var last;
var lastt;
var instaspeedd = 0x64;
var AntiInsta = 0x0;
var AntiBull = 0x0;
var space = 0x1;
var nearestEnemy;
var nearestEnemyAngle;
var isEnemyNear;
var instaSpeed = 0xd2;
var primary;
var secondary;
var foodType;
var wallType;
var spikeType;
var millType;
var mineType;
var boostType;
var turretType;
var spawnpadType;
var autoaim = ![];
var tick = 0x1;
var oldHat;
var oldAcc;
var enemiesNear;
var normalHat;
var normalAcc;
var ws;
var msgpack5 = msgpack;
var boostDir;
let myPlayer = {
    'id': null,
    'x': null,
    'y': null,
    'dir': null,
    'object': null,
    'weapon': null,
    'clan': null,
    'isLeader': null,
    'hat': null,
    'accessory': null,
    'isSkull': null
};
let AutoInsta = ![];
let healToggle = 0x1;
let direcxy;
let ihealToggle = 0x0;
let hatToggle = 0x1;
var cps = 0x1;
var cps2 = 0x1;
var prevX, prevY;
document['msgpack'] = msgpack;
function n() {
    this['buffer'] = new Uint8Array([0x0]);
    this['buffer']['__proto__'] = new Uint8Array();
    this['type'] = 0x0;
}
WebSocket['prototype']['oldSend'] = WebSocket['prototype']['send'];
WebSocket['prototype']['send'] = function (_0x2f8bf6) {
    if (!ws) {
        document['ws'] = this;
        ws = this;
        socketFound(this);
    }
    this['oldSend'](_0x2f8bf6);
};
function socketFound(_0x4190dd) {
    _0x4190dd['addEventListener']('message', function (_0x378144) {
        handleMessage(_0x378144);
    });
}
function handleMessage(_0x1feedf) {
    let _0x3c62c9 = msgpack5['decode'](new Uint8Array(_0x1feedf['data']));
    let _0x31e7f7;
    if (_0x3c62c9['length'] > 0x1) {
        _0x31e7f7 = [
            _0x3c62c9[0x0],
            ..._0x3c62c9[0x1]
        ];
        if (_0x31e7f7[0x1] instanceof Array) {
            _0x31e7f7 = _0x31e7f7;
        }
    } else {
        _0x31e7f7 = _0x3c62c9;
    }
    let _0x2387c9 = _0x31e7f7[0x0];
    if (!_0x31e7f7) {
        return;
    }
    ;
    if (_0x2387c9 === 'io-init') {
        let _0x39b2c9 = document['getElementById']('gameCanvas');
        width = _0x39b2c9['clientWidth'];
        height = _0x39b2c9['clientHeight'];
        $(window)['resize'](function () {
            width = _0x39b2c9['clientWidth'];
            height = _0x39b2c9['clientHeight'];
        });
        _0x39b2c9['addEventListener']('mousemove', _0x48a7d7 => {
            mouseX = _0x48a7d7['clientX'];
            mouseY = _0x48a7d7['clientY'];
        });
    }
    if (_0x2387c9 == '1' && myPlayer['id'] == null) {
        myPlayer['id'] = _0x31e7f7[0x1];
    }
    var _0x5078a8 = '!';
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id']) {
        let _0x1581ba = _0x31e7f7[0x2]['split']('\x20')[0x1];
        if (_0x31e7f7[0x2]['split']('\x20')[0x0] == _0x5078a8 + 'clan') {
            doNewSend([
                '9',
                [null]
            ]);
            setTimeout(() => {
                doNewSend([
                    '8',
                    [_0x1581ba]
                ]);
            }, 0x258);
            setTimeout(() => {
                doNewSend([
                    '10',
                    [_0x1581ba]
                ]);
            }, 0x4b0);
            setTimeout(() => {
                doNewSend([
                    'ch',
                    ['Made\x20Clan\x20[' + _0x1581ba + ']']
                ]);
            }, 0x708);
        }
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id']) {
        let _0x4319c7 = _0x31e7f7[0x2]['split']('\x20')[0x1];
        if (_0x31e7f7[0x2]['split']('\x20')[0x0] == _0x5078a8 + 'is') {
            instaspeedd = _0x4319c7;
            setTimeout(() => {
                ch('InstaSpeed\x20Set\x20To\x20[' + instaspeedd + ']');
            }, 0x258);
        }
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20')[0x0] == _0x5078a8 + 'hat') {
        let _0xcc31a7 = _0x31e7f7[0x2]['split']('\x20')[0x1];
        hat(_0xcc31a7);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Hat\x20Buyed\x20hat(' + _0xcc31a7 + ')']
            ]);
        }, 0x44c);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20')[0x0] == _0x5078a8 + 'acc') {
        let _0x46df58 = _0x31e7f7[0x2]['split']('\x20')[0x1];
        acc(_0x46df58);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Hat\x20Buyed\x20acc(' + _0x46df58 + ')']
            ]);
        }, 0x44c);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2] == 'foodtype') {
        if (lmao == 0x10) {
            setTimeout(() => {
                ch('Apple');
            }, 0x258);
        } else if (lmao == 0x11) {
            setTimeout(() => {
                ch('Cookie\x20or\x20Cheese');
            }, 0x258);
        } else if (lmao == 0x12) {
            setTimeout(() => {
                ch('Cheese');
            }, 0x258);
        }
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2] == _0x5078a8 + 'ai1') {
        autoaim = !![];
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2] == _0x5078a8 + 'ai0') {
        autoaim = ![];
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'pb') {
        doNewSend([
            '6',
            [0x5]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0x9]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Polearm+Bow\x20OP!']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'pm') {
        doNewSend([
            '6',
            [0x5]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0x9]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        doNewSend([
            '6',
            [0x1c]
        ]);
        doNewSend([
            '6',
            [0xf]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Polearm+Musket\x20OP!']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'mill') {
        doNewSend([
            '6',
            [0x1c]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Mill\x20proe']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'km') {
        doNewSend([
            '6',
            [0x3]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0x9]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        doNewSend([
            '6',
            [0x4]
        ]);
        doNewSend([
            '6',
            [0xf]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['KaTana+Musket\x20The\x20Best\x20combo!']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'kh') {
        doNewSend([
            '6',
            [0x3]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x1b]
        ]);
        doNewSend([
            '6',
            [0xa]
        ]);
        doNewSend([
            '6',
            [0x25]
        ]);
        doNewSend([
            '6',
            [0x4]
        ]);
        doNewSend([
            '6',
            [0x19]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Katana+hammer\x201N$T4\x20Blocker']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'dp') {
        doNewSend([
            '6',
            [0x7]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0xa]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        doNewSend([
            '6',
            [0x1c]
        ]);
        doNewSend([
            '6',
            [0x19]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['dagger+powerMill']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'sh') {
        doNewSend([
            '6',
            [0x8]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0xa]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        doNewSend([
            '6',
            [0x1c]
        ]);
        doNewSend([
            '6',
            [0x19]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['stick+hammer']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'gb') {
        doNewSend([
            '6',
            [0x1]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0x9]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        doNewSend([
            '6',
            [0x2]
        ]);
        doNewSend([
            '6',
            [0xd]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Great\x20axe\x20Bow']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'gm') {
        doNewSend([
            '6',
            [0x1]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x17]
        ]);
        doNewSend([
            '6',
            [0x9]
        ]);
        doNewSend([
            '6',
            [0x21]
        ]);
        doNewSend([
            '6',
            [0x2]
        ]);
        doNewSend([
            '6',
            [0xf]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['great\x20axe+\x20Musket']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'khp') {
        doNewSend([
            '6',
            [0x3]
        ]);
        doNewSend([
            '6',
            [0x11]
        ]);
        doNewSend([
            '6',
            [0x1f]
        ]);
        doNewSend([
            '6',
            [0x1b]
        ]);
        doNewSend([
            '6',
            [0xa]
        ]);
        doNewSend([
            '6',
            [0x25]
        ]);
        doNewSend([
            '6',
            [0x4]
        ]);
        doNewSend([
            '6',
            [0x24]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Katana+hammer+Spawndpad']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'rb') {
        doNewSend([
            '6',
            [0xd]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Bow\x20spam\x20yeh']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'mill+pike') {
        doNewSend([
            '6',
            [0x1c]
        ]);
        doNewSend([
            '6',
            [0x19]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['mill+pike']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'katana') {
        doNewSend([
            '6',
            [0x4]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Katana\x20Slected']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'axe') {
        doNewSend([
            '6',
            [0x2]
        ]);
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Axe\x20Slected']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20') == _0x5078a8 + 'pp') {
        setTimeout(() => {
            doNewSend([
                'ch',
                ['U\x20Have\x20' + Random(0x0, 0xc) + '\x20Inch\x20Long\x20PP']
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && myPlayer['id']) {
        if (_0x31e7f7[0x2]['split']('\x20')[0x0] == _0x5078a8 + 'cps' && myPlayer['id']) {
            cps = _0x31e7f7[0x2]['split']('\x20')[0x1];
            setTimeout(() => {
                doNewSend([
                    'ch',
                    ['Changed\x20CPS\x20To\x20[' + cps + ',' + cps2 + 'x]']
                ]);
            }, 0x258);
        }
    }
    if (_0x31e7f7[0x0] == 'ch' && myPlayer['id']) {
        if (_0x31e7f7[0x2]['split']('\x20')[0x0] == _0x5078a8 + 'Cps' && myPlayer['id']) {
            cps2 = _0x31e7f7[0x2]['split']('\x20')[0x1];
            setTimeout(() => {
                doNewSend([
                    'ch',
                    ['Changed\x20CPS\x20To\x20[' + cps + ',' + cps2 + 'x]']
                ]);
            }, 0x258);
        }
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20')[0x0] == _0x5078a8 + 'leave') {
        setTimeout(() => {
            doNewSend([
                'ch',
                ['Left\x20Clan']
            ]);
            doNewSend([
                '9',
                [null]
            ]);
        }, 0x1f4);
    }
    if (_0x31e7f7[0x0] == 'ch' && _0x31e7f7[0x1] == myPlayer['id'] && _0x31e7f7[0x2]['split']('\x20')[0x0] == _0x5078a8 + 'crash') {
        setTimeout(() => {
            crashing = !![];
        }, 0x1f4);
    }
    if (_0x2387c9 == '33') {
        enemiesNear = [];
        for (let _0x440ca8 = 0x0; _0x440ca8 < _0x31e7f7[0x1]['length'] / 0xd; _0x440ca8++) {
            let _0x46358b = _0x31e7f7[0x1]['slice'](0xd * _0x440ca8, 0xd * _0x440ca8 + 0xd);
            if (_0x46358b[0x0] == myPlayer['id']) {
                prevX = myPlayer['x'];
                prevY = myPlayer['y'];
                myPlayer['x'] = _0x46358b[0x1];
                myPlayer['y'] = _0x46358b[0x2];
                myPlayer['dir'] = _0x46358b[0x3];
                myPlayer['object'] = _0x46358b[0x4];
                myPlayer['weapon'] = _0x46358b[0x5];
                myPlayer['clan'] = _0x46358b[0x7];
                myPlayer['isLeader'] = _0x46358b[0x8];
                myPlayer['hat'] = _0x46358b[0x9];
                myPlayer['accessory'] = _0x46358b[0xa];
                myPlayer['isSkull'] = _0x46358b[0xb];
                direcxy = Math['atan2'](myPlayer['y'] - prevY, myPlayer['x'] - prevX);
            } else if (_0x46358b[0x7] != myPlayer['clan'] || _0x46358b[0x7] === null) {
                enemiesNear['push'](_0x46358b);
            }
        }
    }
    if (_0x2387c9 == '6') {
        let _0x5bfd63 = {
            'count': null,
            'x': null,
            'y': null,
            'dir': null,
            'type': null,
            'owner': null,
            'dir': null
        };
        var _0x5dfdcb = [];
        for (let _0x85646a = 0x0; _0x85646a < _0x31e7f7[0x1]['length'] / 0x8; _0x85646a++) {
            let _0x3d13a2 = _0x31e7f7[0x1]['slice'](0x8 * _0x85646a, 0x8 * _0x85646a + 0x8);
            _0x5bfd63['count'] = _0x3d13a2[0x0];
            _0x5bfd63['x'] = _0x3d13a2[0x1];
            _0x5bfd63['y'] = _0x3d13a2[0x2];
            _0x5bfd63['orientation'] = _0x3d13a2[0x4];
            _0x5bfd63['type'] = _0x3d13a2[0x6];
            _0x5bfd63['owner'] = _0x3d13a2[0x7];
            _0x5bfd63['dir'] = Math['atan2'](_0x5bfd63['y'] - myPlayer['y'], _0x5bfd63['x'] - myPlayer['x']);
            if (objects['indexOf'](_0x5bfd63) == -0x1) {
                objects['push'](_0x5bfd63);
            }
            if (_0x5bfd63['type'] == 0xf != myPlayer['id'] || _0x5bfd63['type'] == '15' != myPlayer['id']) {
                _0x5dfdcb['push'](_0x5bfd63);
            }
            if (_0x3d13a2[0x6] == 0xf && _0x3d13a2[0x7] != myPlayer['id']) {
                if (Math['sqrt'](Math['pow'](myPlayer['y'] - _0x3d13a2[0x2], 0x2) + Math['pow'](myPlayer['x'] - _0x3d13a2[0x1], 0x2)) < 0x5a) {
                    nearestTrap = _0x5dfdcb['sort']((_0xe05ec0, _0x45017d) => distance(_0xe05ec0['x'], _0xe05ec0['y'], myPlayer['x'], myPlayer['y']) - distance(_0x45017d['x'], _0x45017d['y'], myPlayer['x'], myPlayer['y']))[0x0];
                    nearestTrapAngle = Math['atan2'](nearestTrap['y'] - myPlayer['y'], nearestTrap['x'] - myPlayer['x']);
                    for (let _0x12c7fe = 0x0; _0x12c7fe < 0x24; _0x12c7fe++) {
                        let _0x5d08b4 = myPlayer['dir'] + toRad(_0x12c7fe * 0xa);
                        place(spikeType, _0x5d08b4);
                        place(boostType, _0x5d08b4);
                    }
                    doNewSend([
                        'ch',
                        ['Trap\x20Found\x20[\x20=\x20' + toDeg(nearestTrapAngle) + ']']
                    ]);
                    doNewSend([
                        '13c',
                        [
                            0x0,
                            0x28,
                            0x0
                        ]
                    ]);
                    doNewSend([
                        'c',
                        [
                            0x1,
                            null
                        ]
                    ]);
                    doNewSend([
                        '2',
                        [nearestTrapAngle]
                    ]);
                    var _0x5b2595 = {};
                    _0x5b2595['hat'] = myPlayer['hat'];
                    var _0x1bd7de = setInterval(() => {
                        for (let _0x2ae125 = 0x0; _0x2ae125 < 0x24; _0x2ae125++) {
                            let _0x49f932 = myPlayer['dir'] + toRad(_0x2ae125 * 0xa);
                            place(spikeType, _0x49f932);
                            place(boostType, _0x49f932);
                        }
                    }, 0x3e8);
                    var _0x4e8483 = setInterval(() => {
                        doNewSend([
                            '2',
                            [nearestTrapAngle]
                        ]);
                    });
                    var _0x25aaa9 = setInterval(() => {
                        if (Math['sqrt'](Math['pow'](myPlayer['y'] - _0x3d13a2[0x2], 0x2) + Math['pow'](myPlayer['x'] - _0x3d13a2[0x1], 0x2)) < 0x32) {
                            if (autobreak == !![]) {
                                doNewSend([
                                    '13c',
                                    [
                                        0x0,
                                        0x28,
                                        0x0
                                    ]
                                ]);
                                doNewSend([
                                    '2',
                                    [nearestTrapAngle]
                                ]);
                                doNewSend([
                                    'c',
                                    [
                                        0x1,
                                        null
                                    ]
                                ]);
                                setTimeout(() => {
                                    hat(0x6);
                                }, 0x14);
                            }
                        } else {
                            clearInterval(_0x25aaa9);
                            clearInterval(_0x4e8483);
                            for (let _0x5b03e7 = 0x0; _0x5b03e7 < 0x24; _0x5b03e7++) {
                                let _0x3872da = myPlayer['dir'] + toRad(_0x5b03e7 * 0xa);
                                place(spikeType, _0x3872da);
                                place(boostType, _0x3872da);
                            }
                            doNewSend([
                                '13c',
                                [
                                    0x0,
                                    _0x5b2595['hat'],
                                    0x0
                                ]
                            ]);
                            doNewSend([
                                'ch',
                                ['AutoBreaker:\x20Destroyed']
                            ]);
                            doNewSend([
                                'c',
                                [
                                    0x0,
                                    null
                                ]
                            ]);
                        }
                    }, 0x96);
                }
            }
        }
    }
    isEnemyNear = ![];
    if (enemiesNear) {
        nearestEnemy = enemiesNear['sort']((_0x4dbcd8, _0x2ca50a) => dist(_0x4dbcd8, myPlayer) - dist(_0x2ca50a, myPlayer))[0x0];
    }
    if (nearestEnemy) {
        nearestEnemyAngle = Math['atan2'](nearestEnemy[0x2] - myPlayer['y'], nearestEnemy[0x1] - myPlayer['x']);
        if (Math['sqrt'](Math['pow'](myPlayer['y'] - nearestEnemy[0x2], 0x2) + Math['pow'](myPlayer['x'] - nearestEnemy[0x1], 0x2)) < 0xfa) {
            isEnemyNear = !![];
            if (autoaim == ![] && myPlayer['hat'] != 0x7 && myPlayer['hat'] != 0x35) {
                normalHat = 0x6;
                if (primary != 0x8) {
                    normalAcc = 0x15;
                }
            }
            ;
        }
    }
    if (isEnemyNear == ![] && autoaim == ![]) {
        normalAcc = 0xb;
        if (myPlayer['y'] < 0x960) {
            normalHat = 0xf;
        } else if (myPlayer['y'] > 0x1ac2 && myPlayer['y'] < 0x1d7e) {
            normalHat = 0x1f;
        } else {
            normalHat = 0xc;
        }
    }
    if (!nearestEnemy) {
        nearestEnemyAngle = myPlayer['dir'];
    }
    if (_0x31e7f7[0x0] == '7' && _0x31e7f7[0x1] != myPlayer['id']) {
        if (dadd == !![]) {
            if (nearestEnemy[0x9] == '7') {
                doNewSend([
                    'ch',
                    ['BullHat\x20Detected']
                ]);
                if (AntiBull == !![]) {
                    hat(0xb);
                } else {
                    hat(0x6);
                }
                acc(0x15);
            }
            if (nearestEnemy[0x9] == '53') {
                doNewSend([
                    'ch',
                    ['TurretGear\x20Detected']
                ]);
                hat(0x16);
                acc(0x15);
            }
            if (nearestEnemy[0x9] == '11') {
                doNewSend([
                    'ch',
                    ['SpikeGear\x20Detected']
                ]);
                hat(0x6);
                acc(0x12);
            }
        }
        if (AntiBull == 0x1) {
            if (nearestEnemy[0x9] != '6') {
                if (myPlayer['hat'] == 0xb) {
                    if (Math['sqrt'](Math['pow'](myPlayer['y'] - nearestEnemy[0x2], 0x2) + Math['pow'](myPlayer['x'] - nearestEnemy[0x1], 0x2)) < 0xdc) {
                        autoaim = !![];
                        hat(0x7);
                        doNewSend([
                            '5',
                            [
                                primary,
                                !![]
                            ]
                        ]);
                        doNewSend([
                            'c',
                            [0x1]
                        ]);
                        setTimeout(() => {
                            place(spikeType, myPlayer['dir'] + toRad(0x2d));
                            place(spikeType, myPlayer['dir'] + toRad(0x13b));
                        }, 0x78);
                        setTimeout(() => {
                            place(foodType, 0x9ff5a2ca93deb8000000000000000000000000000000000000000000000);
                            ch('Detected\x20Timing:\x20AntiBull^_^');
                            autoaim = ![];
                            hat(0xb);
                            doNewSend([
                                'c',
                                [
                                    0x0,
                                    null
                                ]
                            ]);
                        }, 0xc8);
                    }
                }
            }
        }
        if (dadd == !![]) {
            if (Math['sqrt'](Math['pow'](myPlayer['y'] - nearestEnemy[0x2], 0x2) + Math['pow'](myPlayer['x'] - nearestEnemy[0x1], 0x2)) < 0x1f4) {
                if (nearestEnemy[0x5] == '5') {
                    doNewSend([
                        'ch',
                        ['Polearm\x20Detected!!']
                    ]);
                }
                if (nearestEnemy[0x5] == '4') {
                    doNewSend([
                        'ch',
                        ['Katana\x20Detected!!']
                    ]);
                }
                if (nearestEnemy[0x5] == '15') {
                    doNewSend([
                        'ch',
                        ['Musket\x20Detected!!']
                    ]);
                }
                if (nearestEnemy[0x5] == '0') {
                    doNewSend([
                        'ch',
                        ['Tool\x20Hammer\x20Detected!!']
                    ]);
                }
                if (nearestEnemy[0x5] == '11') {
                    doNewSend([
                        'ch',
                        ['Shield\x20Detected!!']
                    ]);
                }
            }
        }
    }
    if (_0x2387c9 == 'h' && _0x31e7f7[0x1] == myPlayer['id']) {
        if (lmao == 0x10) {
            if (_0x31e7f7[0x2] < 0x60 && _0x31e7f7[0x2] > test && healToggle == 0x1) {
                setTimeout(() => {
                    placeq(foodType, null);
                    placeq(foodType, null);
                }, 0x78);
            }
        } else if (lmao == 0x11) {
            if (_0x31e7f7[0x2] < 0x60 && _0x31e7f7[0x2] > test && healToggle == 0x1) {
                setTimeout(() => {
                    placeq(foodType, null);
                }, 0x78);
            }
        }
        if (_0x31e7f7[0x2] < 0x39 && _0x31e7f7[0x2] > 0x0 && AntiInsta == 0x0 && healToggle == 0x1) {
            placeq(foodType, null);
        }
        if (_0x31e7f7[0x2] < 0x3c && _0x31e7f7[0x2] > 0x0 && AntiInsta == 0x1) {
            placeq(foodType);
            hat(0x16);
            setTimeout(() => {
                placeq(foodType);
                placeq(foodType);
                hat(0xd);
                acc(0x11);
            }, 0x14);
            setTimeout(() => {
                hat(0x7);
                placeq(foodType);
                placeq(foodType);
                ccat = ccat + 0x1;
            }, 0x96);
            setTimeout(() => {
                hat(0xd);
                acc(0xd);
                ch('AntiInsta\x20Healed:[\x20' + ccat + '\x20]Times');
            }, 0x1f4);
            setTimeout(() => {
                hat(0x7);
                acc(0xd);
            }, 0x3e8);
        }
        if (_0x31e7f7[0x2] < 0x64 && _0x31e7f7[0x2] > 0x0 && myPlayer['hat'] == 0x7 && AntiInsta == 0x1) {
            setTimeout(() => {
                hat(0x6);
                ch('Bull\x20Bleeded:Succesfully');
            }, 0x7d0);
        }
    }
    if (_0x2387c9 == 'h' && _0x31e7f7[0x1] == myPlayer['id']) {
        if (_0x31e7f7[0x2] < 0x64 && _0x31e7f7[0x2] > 0x0 && ihealToggle == 0x1) {
            setTimeout(() => {
                placei(foodType, null);
            }, 0x10e);
        }
    }
    update();
}
(function () {
    var _0x4c5118;
    var _0xce0a8e;
    var _0x4c0eeb = !![];
    var _0x4915db = 0x0;
    document['addEventListener']('keydown', function (_0x51a8bd) {
        if (_0x51a8bd['keyCode'] == 0xbe && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
            _0x4915db = (_0x4915db + 0x1) % 0x2;
            if (_0x4915db == 0x0) {
                doNewSend([
                    'ch',
                    ['FrozenCompactMills\x20Claude:\x20Off']
                ]);
            } else {
                doNewSend([
                    'ch',
                    ['Frozen\x20CompactMills\x20Claude:\x20On']
                ]);
            }
            _0x51a8bd['preventDefault']();
            if (_0x4c0eeb) {
                _0xce0a8e = setTimeout(function () {
                    _0x2ec43f();
                }, 0x0);
            } else {
                clearTimeout(_0xce0a8e);
            }
            _0x4c5118 = myPlayer['dir'];
            _0x4c0eeb = !_0x4c0eeb;
        }
    });
    function _0x2ec43f() {
        clearTimeout(_0xce0a8e);
        tripleMill();
        _0xce0a8e = setTimeout(function () {
            _0x2ec43f();
        }, 0x32);
    }
}());
function distance(_0x24f7fe, _0x28072c, _0x1ed123, _0x511f14) {
    return Math['sqrt'](Math['pow'](_0x28072c - _0x511f14, 0x2) + Math['pow'](_0x24f7fe - _0x1ed123, 0x2));
}
function createTribe(_0x1898d1) {
    leaveTribe();
    doNewSend([
        '8',
        [_0x1898d1]
    ]);
}
function leaveTribe() {
    doNewSend([
        '9',
        [null]
    ]);
}
function fourSpawnpad() {
    place(spawnpadType, myPlayer['dir'] + toRad(0x87));
    place(spawnpadType, myPlayer['dir'] + toRad(0xb4));
    place(spawnpadType, myPlayer['dir'] + toRad(0xf0));
    place(spawnpadType, myPlayer['dir'] + toRad(0x12c));
    place(spawnpadType, myPlayer['dir'] + toRad(0x168));
}
function doNewSend(_0x30135c) {
    ws['send'](new Uint8Array(Array['from'](msgpack5['encode'](_0x30135c))));
}
function acc(_0x1fdea8) {
    doNewSend([
        '13c',
        [
            0x0,
            _0x1fdea8,
            0x1
        ]
    ]);
    doNewSend([
        '13c',
        [
            0x1,
            _0x1fdea8,
            0x1
        ]
    ]);
}
function hat(_0x44288b) {
    storeBuy(_0x44288b);
    doNewSend([
        '13c',
        [
            0x0,
            _0x44288b,
            0x0
        ]
    ]);
}
function placei(_0x1c32dd, _0x526d71 = Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2)) {
    hat(0x0);
    doNewSend([
        '5',
        [
            _0x1c32dd,
            null
        ]
    ]);
    doNewSend([
        'c',
        [
            0x1,
            _0x526d71
        ]
    ]);
    doNewSend([
        'c',
        [
            0x0,
            _0x526d71
        ]
    ]);
    hat(0x38);
    hat(0x0);
    doNewSend([
        '5',
        [
            _0x1c32dd,
            null
        ]
    ]);
    doNewSend([
        'c',
        [
            0x1,
            _0x526d71
        ]
    ]);
    doNewSend([
        'c',
        [
            0x0,
            _0x526d71
        ]
    ]);
    hat(0x38);
    doNewSend([
        '5',
        [
            myPlayer['weapon'],
            !![]
        ]
    ]);
}
function place(_0x55ee4d, _0x22bc37 = Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2)) {
    for (let _0x1bbefb = 0x0; _0x1bbefb < cps; _0x1bbefb++) {
        doNewSend([
            '5',
            [
                _0x55ee4d,
                null
            ]
        ]);
        doNewSend([
            'c',
            [
                0x1,
                _0x22bc37
            ]
        ]);
        doNewSend([
            'c',
            [
                0x0,
                _0x22bc37
            ]
        ]);
        doNewSend([
            '5',
            [
                myPlayer['weapon'],
                !![]
            ]
        ]);
    }
}
function placeq(_0x189816, _0xdb499f = Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2)) {
    doNewSend([
        '5',
        [
            _0x189816,
            null
        ]
    ]);
    doNewSend([
        'c',
        [
            0x1,
            _0xdb499f
        ]
    ]);
    doNewSend([
        'c',
        [
            0x0,
            _0xdb499f
        ]
    ]);
    doNewSend([
        '5',
        [
            myPlayer['weapon'],
            !![]
        ]
    ]);
}
function placebug(_0x5e4abf, _0x390410 = Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2)) {
    doNewSend([
        'c',
        [
            0x1,
            0x27b46536c66c8e0000000
        ]
    ]);
    doNewSend([
        'c',
        [
            0x0,
            null
        ]
    ]);
}
function mill() {
    place(millType);
}
function toDeg(_0x2ca3dc) {
    var _0x4df94d = Math['PI'];
    return _0x2ca3dc * (0xb4 / _0x4df94d);
}
function tripleMill() {
    place(millType, direcxy + toRad(frozen + 0x6c));
    place(millType, direcxy + toRad(frozen + 0xb4));
    place(millType, direcxy + toRad(frozen + 0xfc));
}
function boostSpike() {
    if (boostDir == null) {
        boostDir = nearestEnemyAngle;
        doNewSend([
            '33',
            [boostDir]
        ]);
    }
    place(boostType, boostDir);
    setTimeout(() => {
        place(boostType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x0));
        place(spikeType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x5a));
        place(spikeType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x10e));
        doNewSend([
            '33',
            [boostDir]
        ]);
    }, 0x1f4);
    setTimeout(() => {
        place(spikeType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0xb4));
    }, 0x2bc);
}
var dash = function (_0x59abb6, _0x3a9278, _0x538216) {
    let _0xf83416 = ![];
    let _0x4f8307 = undefined;
    return {
        'start'(_0x2f0e82) {
            if (_0x2f0e82 == _0x59abb6 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
                _0xf83416 = !![];
                if (_0x4f8307 === undefined) {
                    _0x4f8307 = setInterval(() => {
                        for (let _0x4281bb = 0x0; _0x4281bb < 0x320; _0x4281bb++) {
                            _0x3a9278();
                        }
                        if (!_0xf83416) {
                            clearInterval(_0x4f8307);
                            _0x4f8307 = undefined;
                            console['log']('claered');
                        }
                    }, _0x538216);
                }
            }
        },
        'stop'(_0x311d53) {
            if (_0x311d53 == _0x59abb6 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
                _0xf83416 = ![];
            }
        }
    };
};
var repeater = function (_0x301423, _0x32d0d2, _0x1b1d5d) {
    let _0x2c152d = ![];
    let _0x16f7c9 = undefined;
    return {
        'start'(_0x50dad8) {
            if (_0x50dad8 == _0x301423 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
                _0x2c152d = !![];
                if (_0x16f7c9 === undefined) {
                    _0x16f7c9 = setInterval(() => {
                        for (let _0x1b162b = 0x0; _0x1b162b < cps2; _0x1b162b++) {
                            _0x32d0d2();
                        }
                        if (!_0x2c152d) {
                            clearInterval(_0x16f7c9);
                            _0x16f7c9 = undefined;
                            console['log']('claered');
                        }
                    }, _0x1b1d5d);
                }
            }
        },
        'stop'(_0x2c69e1) {
            if (_0x2c69e1 == _0x301423 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
                _0x2c152d = ![];
            }
        }
    };
};
const dashing = dash(0xbb, () => {
    doNewSend([
        '5',
        [
            'length',
            !0x0
        ]
    ]);
    place(millType, myPlayer['dir'] + 0x87);
    doNewSend([
        '5',
        [
            'length',
            !0x0
        ]
    ]);
    place(spikeType, myPlayer['dir'] + 0xe1);
    doNewSend([
        '5',
        [
            'length',
            !0x0
        ]
    ]);
}, 0x0);
const healer = repeater(0x51, () => {
    placeq(foodType);
}, 0x0);
const boostPlacer = repeater(0x46, () => {
    place(boostType);
}, 0x0);
const spikePlacer = repeater(0x56, () => {
    place(spikeType);
}, 0x0);
const millPlacer = repeater(0x4e, () => {
    tripleMill();
}, 0x0);
const turretPlacer = repeater(0x48, () => {
    place(turretType);
}, 0x0);
const boostSpiker = repeater(0x47, boostSpike, 0x0);
const fourSpawnpader = repeater(0xdc, fourSpawnpad, 0x0);
document['addEventListener']('keydown', _0x5186c7 => {
    dashing['start'](_0x5186c7['keyCode']);
    spikePlacer['start'](_0x5186c7['keyCode']);
    healer['start'](_0x5186c7['keyCode']);
    boostPlacer['start'](_0x5186c7['keyCode']);
    boostSpiker['start'](_0x5186c7['keyCode']);
    millPlacer['start'](_0x5186c7['keyCode']);
    turretPlacer['start'](_0x5186c7['keyCode']);
    fourSpawnpader['start'](_0x5186c7['keyCode']);
    if (_0x5186c7['keyCode'] == 0xbb && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        ch('dashed');
        setTimeout(() => {
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
        }, 0xa);
    }
    if (_0x5186c7['keyCode'] == 0x0 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        for (let _0x58a2e5 = 0x0; _0x58a2e5 < 0x5; _0x58a2e5++) {
            let _0x22c3d0 = myPlayer['dir'] + toRad(_0x58a2e5 * 0x48);
            place(millType, _0x22c3d0);
        }
    }
    if (_0x5186c7['keyCode'] == 0x0 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        for (let _0x14ef67 = 0x0; _0x14ef67 < 0x4; _0x14ef67++) {
            let _0xd148a8 = myPlayer['dir'] + toRad(_0x14ef67 * 0x5a);
            place(wallType, _0xd148a8);
        }
    }
    if (_0x5186c7['keyCode'] == 0x23 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        doNewSend([
            '5',
            [
                'constructor',
                !![]
            ]
        ]);
        doNewSend([
            '9',
            [null]
        ]);
        doNewSend([
            '8',
            ['DedSv']
        ]);
    }
    if (_0x5186c7['keyCode'] == 0x2e && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        setTimeout(() => {
            ch('!crash');
            crashing = !![];
        }, 0x1f4);
    }
    if (_0x5186c7['keyCode'] == 0x49 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        for (let _0x52acf5 = 0x0; _0x52acf5 < 0x4; _0x52acf5++) {
            let _0x2001e7 = myPlayer['dir'] + toRad(_0x52acf5 * 0x5a);
            place(boostType, _0x2001e7);
        }
    }
    if (_0x5186c7['keyCode'] == 0xba && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        for (let _0x378da5 = 0x0; _0x378da5 < 0x4; _0x378da5++) {
            let _0x1c9f10 = myPlayer['dir'] + toRad(_0x378da5 * 0x5a);
            place(spikeType, _0x1c9f10);
        }
    }
    if (_0x5186c7['keyCode'] == 0x48 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        place(turretType, myPlayer['dir'] + toRad(0x2d));
        place(turretType, myPlayer['dir'] - toRad(0x2d));
    }
    if (_0x5186c7['keyCode'] == 0x4d && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (myPlayer['y'] < 0x960) {
            hat(0xf);
        } else if (myPlayer['y'] > 0x1ac2 && myPlayer['y'] < 0x1d7e) {
            hat(0x1f);
        } else {
            hat(0xc);
        }
        acc(0xb);
    }
    if (_0x5186c7['keyCode'] == 0x55 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        last = myPlayer['hat'];
        lastt = myPlayer['acc'];
        autoaim = !![];
        doNewSend([
            '5',
            [
                primary,
                !![]
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x7,
                0x0
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x0,
                0x1
            ]
        ]);
        doNewSend([
            '7',
            [0x3]
        ]);
        setTimeout(() => {
            doNewSend([
                '6',
                [0x5]
            ]);
            doNewSend([
                '6',
                [0x11]
            ]);
            doNewSend([
                '6',
                [0x1f]
            ]);
            doNewSend([
                '6',
                [0x17]
            ]);
            doNewSend([
                '6',
                [0x9]
            ]);
            doNewSend([
                '6',
                [0x21]
            ]);
        }, 0x78);
        setTimeout(() => {
            doNewSend([
                '6',
                [0x4]
            ]);
        }, 0xe6);
        setTimeout(() => {
            doNewSend([
                '5',
                [
                    secondary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x35,
                    0x0
                ]
            ]);
        }, 0x15e);
        setTimeout(() => {
            doNewSend([
                '6',
                [0xf]
            ]);
        }, 0x1d6);
        setTimeout(() => {
            doNewSend([
                '7',
                [0x3]
            ]);
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    last,
                    0x0
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    lastt,
                    0x1
                ]
            ]);
        }, 0x258);
    }
    if (_0x5186c7['keyCode'] == 0x52 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        autoaim = !![];
        var _0x4e081d = {};
        _0x4e081d['hat'] = myPlayer['hat'];
        _0x4e081d['acc'] = myPlayer['accessory'];
        doNewSend([
            'c',
            [0x1]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x0,
                0x1
            ]
        ]);
        doNewSend([
            '5',
            [
                primary,
                !![]
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x7,
                0x0
            ]
        ]);
        setTimeout(() => {
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                'c',
                [
                    0x0,
                    null
                ]
            ]);
        }, 0xc8);
        let _0x33417c = new Uint8Array(0x109);
        setTimeout(() => {
            var _0x125f87 = 0x7e;
            doNewSend([
                '13c',
                [
                    0x0,
                    0x35,
                    0x0
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    _0x4e081d['acc'],
                    0x1
                ]
            ]);
            doNewSend([
                '5',
                [
                    secondary,
                    !![]
                ]
            ]);
            for (let _0x43c8dd = 0x0; _0x43c8dd < 0xa5; _0x43c8dd++) {
                for (let _0x189c7f = 0x0; _0x189c7f < _0x33417c['length']; _0x189c7f++) {
                    _0x33417c[_0x189c7f] = Math['floor'](Math['random']() * 0x1de);
                    _0x125f87 += _0x33417c[_0x189c7f];
                }
            }
            ws['send'](_0x33417c);
        }, instaspeedd);
        setTimeout(() => {
            doNewSend([
                'c',
                [
                    0x0,
                    null
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    _0x4e081d['hat'],
                    0x0
                ]
            ]);
            autoaim = ![];
        }, instaspeedd + 0x64);
    }
    if (_0x5186c7['keyCode'] == 0xc0 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        invis();
    }
    if (_0x5186c7['keyCode'] == 0x20 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        autoaim = !![];
        doNewSend([
            '5',
            [
                primary,
                !![]
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x7,
                0x0
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x0,
                0x1
            ]
        ]);
        doNewSend([
            '13c',
            [
                0x0,
                0x12,
                0x1
            ]
        ]);
        place(spikeType, Math['atan2'](mouseY - height / 0x2, mouseX - width / 0x2) + toRad(0x0));
        doNewSend([
            'c',
            [0x1]
        ]);
        setTimeout(() => {
            doNewSend([
                '13c',
                [
                    0x0,
                    0x35,
                    0x0
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x15,
                    0x1
                ]
            ]);
        }, 0xb2);
        setTimeout(() => {
            autoaim = ![];
            doNewSend([
                'c',
                [
                    0x0,
                    null
                ]
            ]);
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0xb,
                    0x0
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x15,
                    0x1
                ]
            ]);
        }, 0x123);
    }
    if (_0x5186c7['keyCode'] == 0x54 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (space == 0x1) {
            autoaim = !![];
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x7,
                    0x0
                ]
            ]);
            storeBuy(0x7);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x0,
                    0x1
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x13,
                    0x1
                ]
            ]);
            doNewSend([
                'c',
                [0x1]
            ]);
            setTimeout(() => {
                place(spikeType, myPlayer['dir'] + toRad(0x2d));
                place(spikeType, myPlayer['dir'] + toRad(0x13b));
                storeBuy(0x35);
            }, 0xb4);
            setTimeout(() => {
                doNewSend([
                    'c',
                    [
                        0x0,
                        null
                    ]
                ]);
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0xb,
                        0x0
                    ]
                ]);
                storeBuy(0xb);
                autoaim = ![];
                doNewSend([
                    'ch',
                    ['XT\x20Insta:\x201.0']
                ]);
                space = 0x2;
            }, 0xfa);
        }
    }
    if (_0x5186c7['keyCode'] == 0x54 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (space == 0x2) {
            autoaim = !![];
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x15,
                    0x0
                ]
            ]);
            storeBuy(0x15);
            setTimeout(() => {
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x0,
                        0x1
                    ]
                ]);
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x13,
                        0x1
                    ]
                ]);
                doNewSend([
                    'c',
                    [0x1]
                ]);
            }, 0x64);
            setTimeout(() => {
                place(spikeType, myPlayer['dir'] + toRad(0x2d));
                place(spikeType, myPlayer['dir'] + toRad(0x13b));
                doNewSend([
                    'c',
                    [
                        0x0,
                        null
                    ]
                ]);
            }, 0xc8);
            setTimeout(() => {
                doNewSend([
                    'c',
                    [
                        0x0,
                        null
                    ]
                ]);
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x6,
                        0x0
                    ]
                ]);
                storeBuy(0x6);
                autoaim = ![];
                doNewSend([
                    'ch',
                    ['XT\x20Insta:\x202.0']
                ]);
                space = 0x3;
            }, 0xfa);
        }
    }
    if (_0x5186c7['keyCode'] == 0x54 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (space == 0x3) {
            autoaim = !![];
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x7,
                    0x0
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x0,
                    0x1
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x13,
                    0x1
                ]
            ]);
            doNewSend([
                'c',
                [0x1]
            ]);
            setTimeout(() => {
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x35,
                        0x0
                    ]
                ]);
                doNewSend([
                    '5',
                    [
                        secondary,
                        !![]
                    ]
                ]);
            }, instaSpeed - 0x6e);
            setTimeout(() => {
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x6,
                        0x0
                    ]
                ]);
                doNewSend([
                    'c',
                    [
                        0x0,
                        null
                    ]
                ]);
                autoaim = ![];
                doNewSend([
                    'ch',
                    ['XT\x20Insta:\x203.0']
                ]);
                space = 0x1;
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x35,
                        0x0
                    ]
                ]);
            }, instaSpeed);
            setTimeout(() => {
                doNewSend([
                    '5',
                    [
                        primary,
                        !![]
                    ]
                ]);
                ch('XT\x20Insta:\x20Reloaded\x201.0');
            }, instaSpeed + 0x6a4);
            setTimeout(() => {
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x6,
                        0x0
                    ]
                ]);
            }, instaSpeed + 0x898);
        }
    }
    if (_0x5186c7['keyCode'] == 0x61 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (AutoInsta == ![]) {
            AutoInsta = !![];
            doNewSend([
                'ch',
                ['AutoInsta-On']
            ]);
        } else {
            AutoInsta = ![];
            doNewSend([
                'ch',
                ['AutoInsta-Off']
            ]);
        }
    }
    if (_0x5186c7['keyCode'] == 0x66 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (AntiBull == 0x0) {
            AntiBull = 0x1;
            doNewSend([
                'ch',
                ['AntiBull-On']
            ]);
        } else {
            AntiBull = 0x0;
            doNewSend([
                'ch',
                ['AntiBull-Off']
            ]);
        }
    }
    if (_0x5186c7['keyCode'] == 0x65 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (AntiInsta == 0x0) {
            AntiInsta = 0x1;
            doNewSend([
                'ch',
                ['AntiInsta-On']
            ]);
        } else {
            AntiInsta = 0x0;
            doNewSend([
                'ch',
                ['AntiInsta-Off']
            ]);
        }
    }
    if (_0x5186c7['keyCode'] == 0x6a && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (hatToggle == 0x0) {
            hatToggle = 0x1;
            doNewSend([
                'ch',
                ['AutoHat:ON']
            ]);
        } else {
            doNewSend([
                'ch',
                ['AutoHat:OFF']
            ]);
            hatToggle = 0x0;
        }
    }
    if (_0x5186c7['keyCode'] == 0x6f && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (healToggle == 0x0) {
            healToggle = 0x1;
            doNewSend([
                'ch',
                ['AutoHeal:ON']
            ]);
        } else {
            doNewSend([
                'ch',
                ['AutoHeal:OFF']
            ]);
            healToggle = 0x0;
        }
    }
    if (_0x5186c7['keyCode'] == 0x6d && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        if (ihealToggle == 0x0) {
            ihealToggle = 0x1;
            healToggle = 0x1;
            doNewSend([
                'ch',
                ['Assassin\x20Hat\x20Heal:ON']
            ]);
        } else {
            healToggle = 0x1;
            ihealToggle = 0x0;
            doNewSend([
                'ch',
                ['Assassin\x20Hat\x20Heal:Off']
            ]);
        }
    }
    if (_0x5186c7['keyCode'] == 0xbd && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        for (let _0x1907d1 = 0x0; _0x1907d1 < 0x1f4; _0x1907d1++) {
            let _0x3436c7 = new Uint8Array(Math['round'](Math['random']() * 0x32));
            for (let _0x200031 = 0x0; _0x200031 < _0x3436c7['length']; _0x200031++) {
                if (_0x200031 == 0x0) {
                    _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x1f4);
                } else {
                    if (_0x200031 == 0x1) {
                        _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x100);
                    } else {
                        if (_0x200031 == 0x2) {
                            _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x80);
                        } else {
                            if (_0x200031 == 0x3) {
                                _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x55);
                            } else {
                                if (_0x200031 == 0x4) {
                                    _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x40);
                                } else {
                                    if (_0x200031 == 0x5) {
                                        _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x33);
                                    } else {
                                        if (_0x200031 == 0x6) {
                                            _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x2a);
                                        } else {
                                            if (_0x200031 == 0x7) {
                                                _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x24);
                                            } else {
                                                if (_0x200031 == 0x8) {
                                                    _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x20);
                                                } else {
                                                    if (_0x200031 == 0x9) {
                                                        _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x1c);
                                                    } else {
                                                        if (_0x200031 == 0xa) {
                                                            _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x19);
                                                        } else {
                                                            if (_0x200031 == 0xb) {
                                                                _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x17);
                                                            } else {
                                                                if (_0x200031 == 0xc) {
                                                                    _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x15);
                                                                } else {
                                                                    if (_0x200031 == 0xd) {
                                                                        _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x13);
                                                                    } else {
                                                                        if (_0x200031 == 0xe) {
                                                                            _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x12);
                                                                        } else {
                                                                            if (_0x200031 == 0xf) {
                                                                                _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x11);
                                                                            } else {
                                                                                if (_0x200031 == 0x10) {
                                                                                    _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0x10);
                                                                                } else {
                                                                                    if (_0x200031 == 0x11) {
                                                                                        _0x3436c7[_0x200031] = Math['round'](Math['random']() * 0xf);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            ws['oldSend'](_0x3436c7);
        }
        ch('Wtf\x20Crash:>');
    }
    if (_0x5186c7['keyCode'] == 0x4c && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        autoaim = !![];
        doNewSend([
            'c',
            [0x1]
        ]);
        doNewSend([
            '5',
            [
                secondary,
                !![]
            ]
        ]);
        setTimeout(() => {
            doNewSend([
                '6',
                [0xc]
            ]);
        }, 0x64);
        setTimeout(() => {
            doNewSend([
                '6',
                [0xf]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x35,
                    0x0
                ]
            ]);
        }, 0x12c);
        setTimeout(() => {
            doNewSend([
                'c',
                [0x0]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x6,
                    0x0
                ]
            ]);
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            autoaim = ![];
        }, 0x190);
    }
    if (AutoInsta == !![]) {
        if (Math['sqrt'](Math['pow'](myPlayer['y'] - nearestEnemy[0x2], 0x2) + Math['pow'](myPlayer['x'] - nearestEnemy[0x1], 0x2)) < 0xe6) {
            autoaim = !![];
            doNewSend([
                '5',
                [
                    primary,
                    !![]
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x7,
                    0x0
                ]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x0,
                    0x1
                ]
            ]);
            doNewSend([
                'c',
                [0x1]
            ]);
            doNewSend([
                '13c',
                [
                    0x0,
                    0x15,
                    0x1
                ]
            ]);
            setTimeout(() => {
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x35,
                        0x0
                    ]
                ]);
                doNewSend([
                    '5',
                    [
                        secondary,
                        !![]
                    ]
                ]);
                AutoInsta = !![];
            }, instaSpeed - 0x6e);
            setTimeout(() => {
                doNewSend([
                    '5',
                    [
                        primary,
                        !![]
                    ]
                ]);
                doNewSend([
                    '13c',
                    [
                        0x0,
                        0x6,
                        0x0
                    ]
                ]);
                autoaim = ![];
                doNewSend([
                    'ch',
                    ['AutoInsta!!']
                ]);
            }, instaSpeed);
            setTimeout(() => {
                doNewSend([
                    '5',
                    [
                        secondary,
                        !![]
                    ]
                ]);
                doNewSend([
                    'ch',
                    ['AutoReload.']
                ]);
            }, instaSpeed + 0x64);
            setTimeout(() => {
                doNewSend([
                    '5',
                    [
                        secondary,
                        !![]
                    ]
                ]);
                doNewSend([
                    'ch',
                    ['AutoReload..']
                ]);
                doNewSend([
                    'c',
                    [
                        0x0,
                        null
                    ]
                ]);
            }, instaSpeed + 0x258);
            setTimeout(() => {
                doNewSend([
                    '5',
                    [
                        secondary,
                        !![]
                    ]
                ]);
                doNewSend([
                    'ch',
                    ['AutoReload...']
                ]);
            }, instaSpeed + 0x44c);
            setTimeout(() => {
                doNewSend([
                    '5',
                    [
                        primary,
                        !![]
                    ]
                ]);
                doNewSend([
                    'ch',
                    ['AutoReloaded']
                ]);
            }, instaSpeed + 0x6a4);
        }
    }
});
document['addEventListener']('keyup', _0x1af568 => {
    dashing['stop'](_0x1af568['keyCode']);
    spikePlacer['stop'](_0x1af568['keyCode']);
    boostPlacer['stop'](_0x1af568['keyCode']);
    boostSpiker['stop'](_0x1af568['keyCode']);
    millPlacer['stop'](_0x1af568['keyCode']);
    turretPlacer['stop'](_0x1af568['keyCode']);
    healer['stop'](_0x1af568['keyCode']);
    fourSpawnpader['stop'](_0x1af568['keyCode']);
    if (_0x1af568['keyCode'] == 0x47 && document['activeElement']['id']['toLowerCase']() !== 'chatbox') {
        setTimeout(() => {
            doNewSend([
                '33',
                [null]
            ]);
            boostDir = null;
        }, 0xa);
    }
});
function isElementVisible(_0x513d01) {
    return _0x513d01['offsetParent'] !== null;
}
function toRad(_0xd2c2b1) {
    return _0xd2c2b1 * 0.01745329251;
}
function dist(_0xb66fe9, _0x292c05) {
    return Math['sqrt'](Math['pow'](_0x292c05['y'] - _0xb66fe9[0x2], 0x2) + Math['pow'](_0x292c05['x'] - _0xb66fe9[0x1], 0x2));
}
document['getElementById']('gameName')['innerHTML'] = 'ClaudeMod';
document['getElementById']('enterGame')['innerHTML'] = 'NeverGiveUp';
document['getElementById']('enterGame')['blur']();
document['getElementById']('setupCard')['style'] = 'box-shadow:\x20#3DFFBF\x201px\x201px\x2040px;';
document['getElementById']('guideCard')['style'] = 'box-shadow:\x20#3DFFBF\x201px\x201px\x2040px;';
document['getElementById']('gameName')['style'] = 'text-shadow:\x20#3DFFBF\x201px\x201px\x2040px;';
document['getElementById']('enterGame')['style'] = 'text-shadow:\x20#3DFFBF\x201px\x201px\x2040px;';
document['getElementById']('loadingText')['innerHTML'] = 'LoAdInG...';
document['querySelector']('#leaderboard')['appendChild'](function () {
    let _0x190506 = 'ping:\x20';
    let _0x5bff94 = 0x0;
    const _0x585bb0 = document['createElement']('span');
    _0x585bb0['id'] = 'pingTime';
    _0x585bb0['textContent'] = _0x190506;
    _0x585bb0['style']['display'] = 'inline-block';
    setInterval(function () {
        typeof pingTime !== 'undefined' && _0x5bff94 !== pingTime && (_0x5bff94 = pingTime, _0x585bb0['textContent'] = _0x190506 + _0x5bff94, function () {
            if (_0x5bff94 <= 0x46) {
                _0x585bb0['style']['color'] = 'cyan';
            }
            if (_0x5bff94 >= 0x46 && _0x5bff94 <= 0x65) {
                _0x585bb0['style']['color'] = 'lime';
            }
            if (_0x5bff94 >= 0x65 && _0x5bff94 <= 0xfa) {
                _0x585bb0['style']['color'] = 'yellow';
            }
            if (_0x5bff94 >= 0xfb) {
                _0x585bb0['style']['color'] = 'red';
            }
        }());
    });
    return _0x585bb0;
}());
document['title'] = 'xXClaudeXx\x20Mod';
function update() {
    if (isElementVisible(document['getElementById']('actionBarItem16'))) {
        lmao = 0x10;
    }
    if (isElementVisible(document['getElementById']('actionBarItem17'))) {
        lmao = 0x11;
    }
    if (isElementVisible(document['getElementById']('actionBarItem18'))) {
        lmao = 0x11;
    }
    for (let _0x12f9ab = 0x0; _0x12f9ab < 0x9; _0x12f9ab++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x12f9ab['toString']()))) {
            primary = _0x12f9ab;
        }
    }
    for (let _0x4a9337 = 0x9; _0x4a9337 < 0x10; _0x4a9337++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x4a9337['toString']()))) {
            secondary = _0x4a9337;
        }
    }
    for (let _0x565179 = 0x10; _0x565179 < 0x13; _0x565179++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x565179['toString']()))) {
            foodType = _0x565179 - 0x10;
        }
    }
    for (let _0x40d628 = 0x13; _0x40d628 < 0x16; _0x40d628++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x40d628['toString']()))) {
            wallType = _0x40d628 - 0x10;
        }
    }
    for (let _0x277f6d = 0x16; _0x277f6d < 0x1a; _0x277f6d++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x277f6d['toString']()))) {
            spikeType = _0x277f6d - 0x10;
        }
    }
    for (let _0x3ec3ea = 0x1a; _0x3ec3ea < 0x1d; _0x3ec3ea++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x3ec3ea['toString']()))) {
            millType = _0x3ec3ea - 0x10;
        }
    }
    for (let _0x5bdcbc = 0x1d; _0x5bdcbc < 0x1f; _0x5bdcbc++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x5bdcbc['toString']()))) {
            mineType = _0x5bdcbc - 0x10;
        }
    }
    for (let _0x99597e = 0x1f; _0x99597e < 0x21; _0x99597e++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x99597e['toString']()))) {
            boostType = _0x99597e - 0x10;
        }
    }
    for (let _0x48f35a = 0x21; _0x48f35a < 0x24; _0x48f35a++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x48f35a['toString']()))) {
            turretType = _0x48f35a - 0x10;
        }
    }
    for (let _0x21dea7 = 0x24; _0x21dea7 < 0x25; _0x21dea7++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x21dea7['toString']()))) {
            spawnpadType = _0x21dea7 - 0x10;
        }
    }
    for (let _0x42618d = 0x25; _0x42618d < 0x27; _0x42618d++) {
        if (isElementVisible(document['getElementById']('actionBarItem' + _0x42618d['toString']()))) {
            turretType = _0x42618d - 0x10;
        }
    }
}
var weapons = [
    {
        'id': 0x0,
        'type': 0x0,
        'name': 'tool\x20hammer',
        'desc': 'tool\x20for\x20gathering\x20all\x20resources',
        'src': 'hammer_1',
        'length': 0x8c,
        'width': 0x8c,
        'xOff': -0x3,
        'yOff': 0x12,
        'dmg': 0x19,
        'range': 0x41,
        'gather': 0x1,
        'speed': 0x12c
    },
    {
        'id': 0x1,
        'type': 0x0,
        'age': 0x2,
        'name': 'hand\x20axe',
        'desc': 'gathers\x20resources\x20at\x20a\x20higher\x20rate',
        'src': 'axe_1',
        'length': 0x8c,
        'width': 0x8c,
        'xOff': 0x3,
        'yOff': 0x18,
        'dmg': 0x1e,
        'spdMult': 0x1,
        'range': 0x46,
        'gather': 0x2,
        'speed': 0x190
    },
    {
        'id': 0x2,
        'type': 0x0,
        'age': 0x8,
        'name': 'great\x20axe',
        'desc': 'deal\x20more\x20damage\x20and\x20gather\x20more\x20resources',
        'src': 'great_axe_1',
        'length': 0x8c,
        'width': 0x8c,
        'xOff': -0x8,
        'yOff': 0x19,
        'dmg': 0x23,
        'spdMult': 0x1,
        'range': 0x4b,
        'gather': 0x4,
        'speed': 0x190
    },
    {
        'id': 0x3,
        'type': 0x0,
        'age': 0x2,
        'name': 'short\x20sword',
        'desc': 'increased\x20attack\x20power\x20but\x20slower\x20move\x20speed',
        'src': 'sword_1',
        'iPad': 1.3,
        'length': 0x82,
        'width': 0xd2,
        'xOff': -0x8,
        'yOff': 0x2e,
        'dmg': 0x23,
        'spdMult': 0.85,
        'range': 0x6e,
        'gather': 0x1,
        'speed': 0x12c
    },
    {
        'id': 0x4,
        'type': 0x0,
        'age': 0x8,
        'name': 'katana',
        'desc': 'greater\x20range\x20and\x20damage',
        'src': 'samurai_1',
        'iPad': 1.3,
        'length': 0x82,
        'width': 0xd2,
        'xOff': -0x8,
        'yOff': 0x3b,
        'dmg': 0x28,
        'spdMult': 0.8,
        'range': 0x76,
        'gather': 0x1,
        'speed': 0x12c
    },
    {
        'id': 0x5,
        'type': 0x0,
        'age': 0x2,
        'name': 'polearm',
        'desc': 'long\x20range\x20melee\x20weapon',
        'src': 'spear_1',
        'iPad': 1.3,
        'length': 0x82,
        'width': 0xd2,
        'xOff': -0x8,
        'yOff': 0x35,
        'dmg': 0x2d,
        'knock': 0.2,
        'spdMult': 0.82,
        'range': 0x8e,
        'gather': 0x1,
        'speed': 0x2bc
    },
    {
        'id': 0x6,
        'type': 0x0,
        'age': 0x2,
        'name': 'bat',
        'desc': 'fast\x20long\x20range\x20melee\x20weapon',
        'src': 'bat_1',
        'iPad': 1.3,
        'length': 0x6e,
        'width': 0xb4,
        'xOff': -0x8,
        'yOff': 0x35,
        'dmg': 0x14,
        'knock': 0.7,
        'range': 0x6e,
        'gather': 0x1,
        'speed': 0x12c
    },
    {
        'id': 0x7,
        'type': 0x0,
        'age': 0x2,
        'name': 'daggers',
        'desc': 'really\x20fast\x20short\x20range\x20weapon',
        'src': 'dagger_1',
        'iPad': 0.8,
        'length': 0x6e,
        'width': 0x6e,
        'xOff': 0x12,
        'yOff': 0x0,
        'dmg': 0x14,
        'knock': 0.1,
        'range': 0x41,
        'gather': 0x1,
        'hitSlow': 0.1,
        'spdMult': 1.13,
        'speed': 0x64
    },
    {
        'id': 0x8,
        'type': 0x0,
        'age': 0x2,
        'name': 'stick',
        'desc': 'great\x20for\x20gathering\x20but\x20very\x20weak',
        'src': 'stick_1',
        'length': 0x8c,
        'width': 0x8c,
        'xOff': 0x3,
        'yOff': 0x18,
        'dmg': 0x1,
        'spdMult': 0x1,
        'range': 0x46,
        'gather': 0x7,
        'speed': 0x190
    },
    {
        'id': 0x9,
        'type': 0x1,
        'age': 0x6,
        'name': 'hunting\x20bow',
        'desc': 'bow\x20used\x20for\x20ranged\x20combat\x20and\x20hunting',
        'src': 'bow_1',
        'req': [
            'wood',
            0x4
        ],
        'length': 0x78,
        'width': 0x78,
        'xOff': -0x6,
        'yOff': 0x0,
        'projectile': 0x0,
        'spdMult': 0.75,
        'speed': 0x258
    },
    {
        'id': 0xa,
        'type': 0x1,
        'age': 0x6,
        'name': 'great\x20hammer',
        'desc': 'hammer\x20used\x20for\x20destroying\x20structures',
        'src': 'great_hammer_1',
        'length': 0x8c,
        'width': 0x8c,
        'xOff': -0x9,
        'yOff': 0x19,
        'dmg': 0xa,
        'spdMult': 0.88,
        'range': 0x4b,
        'sDmg': 7.5,
        'gather': 0x1,
        'speed': 0x190
    },
    {
        'id': 0xb,
        'type': 0x1,
        'age': 0x6,
        'name': 'wooden\x20shield',
        'desc': 'blocks\x20projectiles\x20and\x20reduces\x20melee\x20damage',
        'src': 'shield_1',
        'length': 0x78,
        'width': 0x78,
        'shield': 0.2,
        'xOff': 0x6,
        'yOff': 0x0,
        'spdMult': 0.7
    },
    {
        'id': 0xc,
        'type': 0x1,
        'age': 0x8,
        'name': 'crossbow',
        'desc': 'deals\x20more\x20damage\x20and\x20has\x20greater\x20range',
        'src': 'crossbow_1',
        'req': [
            'wood',
            0x5
        ],
        'aboveHand': !0x0,
        'armS': 0.75,
        'length': 0x78,
        'width': 0x78,
        'xOff': -0x4,
        'yOff': 0x0,
        'projectile': 0x2,
        'spdMult': 0.7,
        'speed': 0x2bc
    },
    {
        'id': 0xd,
        'type': 0x1,
        'age': 0x9,
        'name': 'repeater\x20crossbow',
        'desc': 'high\x20firerate\x20crossbow\x20with\x20reduced\x20damage',
        'src': 'crossbow_2',
        'req': [
            'wood',
            0xa
        ],
        'aboveHand': !0x0,
        'armS': 0.75,
        'length': 0x78,
        'width': 0x78,
        'xOff': -0x4,
        'yOff': 0x0,
        'projectile': 0x3,
        'spdMult': 0.7,
        'speed': 0xe6
    },
    {
        'id': 0xe,
        'type': 0x1,
        'age': 0x6,
        'name': 'mc\x20grabby',
        'desc': 'steals\x20resources\x20from\x20enemies',
        'src': 'grab_1',
        'length': 0x82,
        'width': 0xd2,
        'xOff': -0x8,
        'yOff': 0x35,
        'dmg': 0x0,
        'steal': 0xfa,
        'knock': 0.2,
        'spdMult': 1.05,
        'range': 0x7d,
        'gather': 0x0,
        'speed': 0x2bc
    },
    {
        'id': 0xf,
        'type': 0x1,
        'age': 0x9,
        'name': 'musket',
        'desc': 'slow\x20firerate\x20but\x20high\x20damage\x20and\x20range',
        'src': 'musket_1',
        'req': [
            'stone',
            0xa
        ],
        'aboveHand': !0x0,
        'rec': 0.35,
        'armS': 0.6,
        'hndS': 0.3,
        'hndD': 1.6,
        'length': 0x12c,
        'width': 0xcd,
        'xOff': 0x19,
        'yOff': 0x0,
        'projectile': 0x5,
        'hideProjectile': !0x0,
        'spdMult': 0.6,
        'speed': 0x5dc
    }
];
